{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      posts: [],\n      friends: [],\n      // Fetch friends from backend\n      user: {\n        name: '',\n        bio: '',\n        avatar: ''\n      },\n      error: null,\n      activeTab: 'posts',\n      selectedFriend: null // To store the selected friend\n    };\n  },\n  created() {\n    this.fetchPosts();\n    this.fetchFriends();\n    if (this.isAuthenticated) {\n      this.user = this.$store.getters.getUser || this.user;\n      this.fetchUserPosts();\n    } else {\n      this.error = 'You need to be logged in to view this page.';\n    }\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/api/user/posts', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        this.posts = response.data.posts;\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    },\n    async fetchFriends() {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/api/user/friends', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        this.friends = response.data.friends;\n      } catch (error) {\n        console.error('Error fetching friends:', error);\n      }\n    },\n    async likePost(post) {\n      try {\n        await axios.post(`http://127.0.0.1:5000/api/user/posts/${post.id}/like`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        post.likes += 1;\n      } catch (error) {\n        console.error('Error liking post:', error);\n      }\n    },\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    async updateSettings() {\n      try {\n        const response = await axios.put('http://127.0.0.1:5000/api/user/settings', this.user, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        this.user = response.data.user;\n        alert('Settings updated successfully');\n      } catch (error) {\n        console.error('Error updating settings:', error);\n      }\n    },\n    selectFriend(friend) {\n      this.selectedFriend = friend;\n      this.$router.push({\n        name: 'FriendProfile',\n        params: {\n          friendId: friend.id\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","posts","friends","user","name","bio","avatar","error","activeTab","selectedFriend","created","fetchPosts","fetchFriends","isAuthenticated","$store","getters","getUser","fetchUserPosts","methods","response","get","headers","Authorization","localStorage","getItem","console","likePost","post","id","likes","formatDate","date","options","year","month","day","Date","toLocaleDateString","undefined","updateSettings","put","alert","selectFriend","friend","$router","push","params","friendId"],"sources":["src/components/UserProfile.vue"],"sourcesContent":["<template>\r\n  <b-container class=\"profile-container\">\r\n    <!-- User Info Section -->\r\n    <b-row class=\"user-info-container\">\r\n      <b-col cols=\"2\">\r\n        <b-img :src=\"user.avatar || 'default-avatar.png'\" alt=\"User Avatar\" class=\"avatar-large\"></b-img>\r\n      </b-col>\r\n      <b-col cols=\"10\">\r\n        <div class=\"user-details\">\r\n          <h1 class=\"username\">{{ user.name || 'Anonymous' }}</h1>\r\n          <p class=\"user-bio\">{{ user.bio || 'No bio available' }}</p>\r\n        </div>\r\n      </b-col>\r\n    </b-row>\r\n\r\n    <!-- Navigation Tabs -->\r\n    <b-tabs v-model=\"activeTab\">\r\n      <b-tab title=\"Posts\" key=\"posts\">\r\n        <div class=\"posts-container\">\r\n          <h2 class=\"section-title\">My Posts</h2>\r\n          <b-list-group>\r\n            <b-list-group-item v-for=\"post in posts\" :key=\"post.id\">\r\n              <div class=\"post-header\">\r\n                <b-img :src=\"post.user.avatar || 'default-avatar.png'\" alt=\"User Avatar\" class=\"avatar\"></b-img>\r\n                <div class=\"user-info\">\r\n                  <h3 class=\"username\">{{ post.user.name || 'Anonymous' }}</h3>\r\n                  <p class=\"post-date\">{{ formatDate(post.date) }}</p>\r\n                </div>\r\n              </div>\r\n              <div class=\"post-content\">{{ post.content }}</div>\r\n              <div class=\"post-actions\">\r\n                <b-button size=\"sm\" @click=\"likePost(post)\" class=\"like-button\">üëç Like</b-button>\r\n                <span class=\"like-count\">{{ post.likes }} Likes</span>\r\n                <b-button size=\"sm\" class=\"comment-button\">üí¨ Comment</b-button>\r\n                <b-button size=\"sm\" class=\"share-button\">üîó Share</b-button>\r\n              </div>\r\n              <b-form-input class=\"comment-input\" placeholder=\"Write a comment...\"></b-form-input>\r\n            </b-list-group-item>\r\n          </b-list-group>\r\n          <p v-if=\"posts.length === 0\" class=\"no-posts\">You have no posts.</p>\r\n        </div>\r\n      </b-tab>\r\n      <b-tab title=\"Friends\" key=\"friends\">\r\n        <div class=\"friends-container\">\r\n          <h2 class=\"section-title\">Friends</h2>\r\n          <b-list-group>\r\n            <b-list-group-item v-for=\"friend in friends\" :key=\"friend.id\" @click=\"selectFriend(friend)\">\r\n              <b-img :src=\"friend.avatar || 'default-avatar.png'\" alt=\"Friend Avatar\" class=\"avatar-small\"></b-img>\r\n              <div class=\"friend-info\">\r\n                <h3 class=\"friend-name\">{{ friend.name }}</h3>\r\n              </div>\r\n            </b-list-group-item>\r\n          </b-list-group>\r\n          <p v-if=\"friends.length === 0\" class=\"no-friends\">You have no friends.</p>\r\n        </div>\r\n      </b-tab>\r\n      <b-tab title=\"Settings\" key=\"settings\">\r\n        <div class=\"settings-container\">\r\n          <h2 class=\"section-title\">Settings</h2>\r\n          <b-form @submit.prevent=\"updateSettings\">\r\n            <b-form-group label=\"Username\">\r\n              <b-form-input v-model=\"user.name\"></b-form-input>\r\n            </b-form-group>\r\n            <b-form-group label=\"Bio\">\r\n              <b-form-textarea v-model=\"user.bio\"></b-form-textarea>\r\n            </b-form-group>\r\n            <b-button type=\"submit\" variant=\"success\">Save Changes</b-button>\r\n          </b-form>\r\n        </div>\r\n      </b-tab>\r\n    </b-tabs>\r\n\r\n    <!-- Error Message -->\r\n    <b-alert v-if=\"error\" variant=\"danger\" dismissible>{{ error }}</b-alert>\r\n  </b-container>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      posts: [],\r\n      friends: [], // Fetch friends from backend\r\n      user: { name: '', bio: '', avatar: '' },\r\n      error: null,\r\n      activeTab: 'posts',\r\n      selectedFriend: null, // To store the selected friend\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchPosts();\r\n    this.fetchFriends();\r\n    if (this.isAuthenticated) {\r\n      this.user = this.$store.getters.getUser || this.user;\r\n      this.fetchUserPosts();\r\n    } else {\r\n      this.error = 'You need to be logged in to view this page.';\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchPosts() {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:5000/api/user/posts', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        this.posts = response.data.posts;\r\n      } catch (error) {\r\n        console.error('Error fetching posts:', error);\r\n      }\r\n    },\r\n    async fetchFriends() {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:5000/api/user/friends', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        this.friends = response.data.friends;\r\n      } catch (error) {\r\n        console.error('Error fetching friends:', error);\r\n      }\r\n    },\r\n    async likePost(post) {\r\n      try {\r\n        await axios.post(`http://127.0.0.1:5000/api/user/posts/${post.id}/like`, {}, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        post.likes += 1;\r\n      } catch (error) {\r\n        console.error('Error liking post:', error);\r\n      }\r\n    },\r\n    formatDate(date) {\r\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n      return new Date(date).toLocaleDateString(undefined, options);\r\n    },\r\n    async updateSettings() {\r\n      try {\r\n        const response = await axios.put('http://127.0.0.1:5000/api/user/settings', this.user, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        this.user = response.data.user;\r\n        alert('Settings updated successfully');\r\n      } catch (error) {\r\n        console.error('Error updating settings:', error);\r\n      }\r\n    },\r\n    selectFriend(friend) {\r\n      this.selectedFriend = friend;\r\n      this.$router.push({ name: 'FriendProfile', params: { friendId: friend.id } });\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.profile-container {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  background: #f0f2f5;\r\n  border-radius: 10px;\r\n}\r\n\r\n.user-info-container {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 10px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.avatar-large {\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50%;\r\n  margin-right: 20px;\r\n}\r\n\r\n.user-details {\r\n  flex-grow: 1;\r\n}\r\n\r\n.username {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin: 0;\r\n}\r\n\r\n.user-bio {\r\n  font-size: 16px;\r\n  color: #666;\r\n}\r\n\r\n.profile-nav {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.profile-nav button {\r\n  padding: 10px 20px;\r\n  border: none;\r\n  background: #007bff;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  border-radius: 20px;\r\n  font-size: 16px;\r\n}\r\n\r\n.profile-nav button.active {\r\n  background: #0056b3;\r\n}\r\n\r\n.section-title {\r\n  font-size: 22px;\r\n  margin-bottom: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.posts-container, .friends-container, .settings-container {\r\n  background: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.post-list, .friends-list {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\n.post-item, .friend-item {\r\n  background: #f9f9f9;\r\n  padding: 15px;\r\n  margin-bottom: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.post-header, .friend-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.avatar, .avatar-small {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.post-content, .friend-name {\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n\r\n.post-actions, .comment-section, .error-message {\r\n  border-top: 1px solid #e1e4e8;\r\n  padding-top: 10px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.like-button, .comment-button, .share-button {\r\n  background: none;\r\n  border: none;\r\n  color: #007bff;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.like-button:hover, .comment-button:hover, .share-button:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.like-count, .no-posts, .no-friends {\r\n  font-size: 14px;\r\n  color: #555;\r\n}\r\n\r\n.comment-input {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 20px;\r\n  background: #f0f2f5;\r\n}\r\n\r\n.settings-container label {\r\n  display: block;\r\n  font-size: 14px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.settings-container input, .settings-container textarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 5px;\r\n}\r\n\r\n.save-button {\r\n  padding: 10px 20px;\r\n  border: none;\r\n  background: #28a745;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n}\r\n\r\n.error-message {\r\n  color: #ff4d4d;\r\n  text-align: center;\r\n  font-size: 16px;\r\n}\r\n</style>\r\n"],"mappings":"AA8EA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,OAAA;MAAA;MACAC,IAAA;QAAAC,IAAA;QAAAC,GAAA;QAAAC,MAAA;MAAA;MACAC,KAAA;MACAC,SAAA;MACAC,cAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;IACA,KAAAC,YAAA;IACA,SAAAC,eAAA;MACA,KAAAV,IAAA,QAAAW,MAAA,CAAAC,OAAA,CAAAC,OAAA,SAAAb,IAAA;MACA,KAAAc,cAAA;IACA;MACA,KAAAV,KAAA;IACA;EACA;EACAW,OAAA;IACA,MAAAP,WAAA;MACA;QACA,MAAAQ,QAAA,SAAApB,KAAA,CAAAqB,GAAA;UACAC,OAAA;YACAC,aAAA,YAAAC,YAAA,CAAAC,OAAA;UACA;QACA;QACA,KAAAvB,KAAA,GAAAkB,QAAA,CAAAnB,IAAA,CAAAC,KAAA;MACA,SAAAM,KAAA;QACAkB,OAAA,CAAAlB,KAAA,0BAAAA,KAAA;MACA;IACA;IACA,MAAAK,aAAA;MACA;QACA,MAAAO,QAAA,SAAApB,KAAA,CAAAqB,GAAA;UACAC,OAAA;YACAC,aAAA,YAAAC,YAAA,CAAAC,OAAA;UACA;QACA;QACA,KAAAtB,OAAA,GAAAiB,QAAA,CAAAnB,IAAA,CAAAE,OAAA;MACA,SAAAK,KAAA;QACAkB,OAAA,CAAAlB,KAAA,4BAAAA,KAAA;MACA;IACA;IACA,MAAAmB,SAAAC,IAAA;MACA;QACA,MAAA5B,KAAA,CAAA4B,IAAA,yCAAAA,IAAA,CAAAC,EAAA;UACAP,OAAA;YACAC,aAAA,YAAAC,YAAA,CAAAC,OAAA;UACA;QACA;QACAG,IAAA,CAAAE,KAAA;MACA,SAAAtB,KAAA;QACAkB,OAAA,CAAAlB,KAAA,uBAAAA,KAAA;MACA;IACA;IACAuB,WAAAC,IAAA;MACA,MAAAC,OAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,GAAA;MAAA;MACA,WAAAC,IAAA,CAAAL,IAAA,EAAAM,kBAAA,CAAAC,SAAA,EAAAN,OAAA;IACA;IACA,MAAAO,eAAA;MACA;QACA,MAAApB,QAAA,SAAApB,KAAA,CAAAyC,GAAA,iDAAArC,IAAA;UACAkB,OAAA;YACAC,aAAA,YAAAC,YAAA,CAAAC,OAAA;UACA;QACA;QACA,KAAArB,IAAA,GAAAgB,QAAA,CAAAnB,IAAA,CAAAG,IAAA;QACAsC,KAAA;MACA,SAAAlC,KAAA;QACAkB,OAAA,CAAAlB,KAAA,6BAAAA,KAAA;MACA;IACA;IACAmC,aAAAC,MAAA;MACA,KAAAlC,cAAA,GAAAkC,MAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;QAAAzC,IAAA;QAAA0C,MAAA;UAAAC,QAAA,EAAAJ,MAAA,CAAAf;QAAA;MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}