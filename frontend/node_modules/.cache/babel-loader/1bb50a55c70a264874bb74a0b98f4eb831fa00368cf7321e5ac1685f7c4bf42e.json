{"ast":null,"code":"import Vue from 'vue';\nimport Router from 'vue-router';\nimport HomePage from '@/views/HomePage.vue';\nimport AboutPage from '@/views/AboutPage.vue';\nimport LoginForm from '@/components/LoginForm.vue';\nimport SignupForm from '@/components/SignupForm.vue';\nimport UserDashboard from '@/components/UserDashboard.vue';\nimport CreatePost from '@/components/CreatePost.vue';\nimport UserProfile from '@/components/UserProfile.vue';\nimport store from '@/store'; // Import the Vuex store\n\nVue.use(Router);\nconst routes = [{\n  path: '/',\n  name: 'Home',\n  component: HomePage\n}, {\n  path: '/about',\n  name: 'About',\n  component: AboutPage\n}, {\n  path: '/dashboard',\n  name: 'UserDashboard',\n  component: UserDashboard,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/login',\n  name: 'Login',\n  component: LoginForm\n}, {\n  path: '/signup',\n  name: 'Signup',\n  component: SignupForm\n}, {\n  path: '/create-post',\n  name: 'CreatePost',\n  component: CreatePost,\n  meta: {\n    requiresAuth: true\n  } // Ensure this route requires authentication\n}, {\n  path: '/profile',\n  name: 'UserProfile',\n  component: UserProfile,\n  meta: {\n    requiresAuth: true\n  } // Ensure this route requires authentication\n}];\nconst router = new Router({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\nrouter.beforeEach(async (to, from, next) => {\n  const loggedIn = store.getters.isAuthenticated;\n  console.log(`Navigating to ${to.path} from ${from.path}. Logged in: ${loggedIn}`);\n\n  // Check if the user is already logged in from local storage token\n  if (!loggedIn && localStorage.getItem('token')) {\n    try {\n      console.log('Fetching user data...');\n      await store.dispatch('fetchUser');\n    } catch (error) {\n      console.error('Failed to fetch user data:', error);\n      store.commit('LOGOUT');\n    }\n  }\n\n  // If route requires authentication and user is not logged in, redirect to login\n  if (to.matched.some(record => record.meta.requiresAuth) && !store.getters.isAuthenticated) {\n    console.log(`Access to ${to.path} requires auth. Redirecting to login.`);\n    return next('/login');\n  }\n\n  // If already logged in and trying to access login or signup page, redirect to dashboard\n  if ((to.path === '/login' || to.path === '/signup') && store.getters.isAuthenticated) {\n    console.log(`Already logged in. Redirecting to dashboard.`);\n    return next('/dashboard');\n  }\n  next();\n});\nexport default router;","map":{"version":3,"names":["Vue","Router","HomePage","AboutPage","LoginForm","SignupForm","UserDashboard","CreatePost","UserProfile","store","use","routes","path","name","component","meta","requiresAuth","router","mode","base","process","env","BASE_URL","beforeEach","to","from","next","loggedIn","getters","isAuthenticated","console","log","localStorage","getItem","dispatch","error","commit","matched","some","record"],"sources":["C:/Users/moham/Desktop/bicobico1 - Copy/frontend/src/router/index.js"],"sourcesContent":["import Vue from 'vue';\r\nimport Router from 'vue-router';\r\nimport HomePage from '@/views/HomePage.vue';\r\nimport AboutPage from '@/views/AboutPage.vue';\r\nimport LoginForm from '@/components/LoginForm.vue';\r\nimport SignupForm from '@/components/SignupForm.vue';\r\nimport UserDashboard from '@/components/UserDashboard.vue';\r\nimport CreatePost from '@/components/CreatePost.vue';\r\nimport UserProfile from '@/components/UserProfile.vue';\r\nimport store from '@/store'; // Import the Vuex store\r\n\r\nVue.use(Router);\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    name: 'Home',\r\n    component: HomePage\r\n  },\r\n  {\r\n    path: '/about',\r\n    name: 'About',\r\n    component: AboutPage\r\n  },\r\n  {\r\n    path: '/dashboard',\r\n    name: 'UserDashboard',\r\n    component: UserDashboard,\r\n    meta: { requiresAuth: true }\r\n  },\r\n  {\r\n    path: '/login',\r\n    name: 'Login',\r\n    component: LoginForm\r\n  },\r\n  {\r\n    path: '/signup',\r\n    name: 'Signup',\r\n    component: SignupForm\r\n  },\r\n  {\r\n    path: '/create-post',\r\n    name: 'CreatePost',\r\n    component: CreatePost,\r\n    meta: { requiresAuth: true } // Ensure this route requires authentication\r\n  },\r\n  {\r\n    path: '/profile',\r\n    name: 'UserProfile',\r\n    component: UserProfile,\r\n    meta: { requiresAuth: true } // Ensure this route requires authentication\r\n  }\r\n];\r\n\r\nconst router = new Router({\r\n  mode: 'history',\r\n  base: process.env.BASE_URL,\r\n  routes\r\n});\r\n\r\nrouter.beforeEach(async (to, from, next) => {\r\n  const loggedIn = store.getters.isAuthenticated;\r\n  console.log(`Navigating to ${to.path} from ${from.path}. Logged in: ${loggedIn}`);\r\n\r\n  // Check if the user is already logged in from local storage token\r\n  if (!loggedIn && localStorage.getItem('token')) {\r\n    try {\r\n      console.log('Fetching user data...');\r\n      await store.dispatch('fetchUser');\r\n    } catch (error) {\r\n      console.error('Failed to fetch user data:', error);\r\n      store.commit('LOGOUT');\r\n    }\r\n  }\r\n\r\n  // If route requires authentication and user is not logged in, redirect to login\r\n  if (to.matched.some(record => record.meta.requiresAuth) && !store.getters.isAuthenticated) {\r\n    console.log(`Access to ${to.path} requires auth. Redirecting to login.`);\r\n    return next('/login');\r\n  }\r\n\r\n  // If already logged in and trying to access login or signup page, redirect to dashboard\r\n  if ((to.path === '/login' || to.path === '/signup') && store.getters.isAuthenticated) {\r\n    console.log(`Already logged in. Redirecting to dashboard.`);\r\n    return next('/dashboard');\r\n  }\r\n\r\n  next();\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}