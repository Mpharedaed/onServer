{"ast":null,"code":"import { mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'AppHeader',\n  data() {\n    return {\n      menuOpen: false,\n      isScrolled: false\n    };\n  },\n  computed: {\n    ...mapGetters(['isAuthenticated'])\n  },\n  methods: {\n    ...mapActions(['logout']),\n    // Logout function\n    logoutUser() {\n      this.logout().then(() => {\n        this.$router.push('/login');\n        this.closeMenu();\n      });\n    },\n    // Toggle mobile menu\n    toggleMenu() {\n      this.menuOpen = !this.menuOpen;\n      if (this.menuOpen) {\n        document.body.style.overflow = 'hidden'; // Prevent background scroll\n      } else {\n        document.body.style.overflow = 'auto'; // Restore background scroll\n      }\n    },\n    // Close mobile menu\n    closeMenu() {\n      this.menuOpen = false;\n      document.body.style.overflow = 'auto'; // Restore background scroll\n    },\n    // Handle navigation and close menu\n    navigate() {\n      this.closeMenu();\n    },\n    // Handle scroll event for header\n    handleScroll() {\n      this.isScrolled = window.scrollY > 50;\n    },\n    // Debounce for performance improvement on scroll\n    debounce(fn, delay) {\n      let timer = null;\n      return function (...args) {\n        clearTimeout(timer);\n        timer = setTimeout(() => fn.apply(this, args), delay);\n      };\n    }\n  },\n  mounted() {\n    this.handleScroll = this.debounce(this.handleScroll, 50); // Debounced scroll handling\n    window.addEventListener('scroll', this.handleScroll);\n  },\n  beforeUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","name","data","menuOpen","isScrolled","computed","methods","logoutUser","logout","then","$router","push","closeMenu","toggleMenu","document","body","style","overflow","navigate","handleScroll","window","scrollY","debounce","fn","delay","timer","args","clearTimeout","setTimeout","apply","mounted","addEventListener","beforeUnmount","removeEventListener"],"sources":["src/components/AppHeader/AppHeader.vue"],"sourcesContent":["<template>\n  <header class=\"header\" :class=\"{ scrolled: isScrolled }\">\n    <div class=\"container\">\n      <div class=\"logo\">\n        <router-link to=\"/\">\n          <!-- Ensure the image path is correct -->\n          <img\n            src=\"@/assets/logo.png\"\n            alt=\"Dawlat Emad Logo\"\n            class=\"logo-image\"\n          />\n        </router-link>\n      </div>\n      <nav class=\"navigation\">\n        <ul>\n          <li><router-link to=\"/\">Home</router-link></li>\n          <li><router-link to=\"/about\">About</router-link></li>\n          <li v-if=\"isAuthenticated\">\n            <router-link to=\"/dashboard\">Dashboard</router-link>\n          </li>\n          <li v-if=\"isAuthenticated\">\n            <router-link to=\"/profile\">Profile</router-link>\n          </li>\n          <li v-if=\"!isAuthenticated\">\n            <router-link to=\"/login\">Login</router-link>\n          </li>\n          <li v-if=\"isAuthenticated\">\n            <router-link to=\"/create-post\">Create Post</router-link>\n          </li>\n          <li v-if=\"isAuthenticated\">\n            <a href=\"#\" @click.prevent=\"logoutUser\">Logout</a>\n          </li>\n        </ul>\n      </nav>\n      <div :class=\"['menu-toggle', { open: menuOpen }]\" @click=\"toggleMenu\">\n        <span></span>\n        <span></span>\n        <span></span>\n      </div>\n    </div>\n    <!-- Mobile Navigation Overlay -->\n    <transition name=\"fade\">\n      <div\n        class=\"mobile-navigation-overlay\"\n        v-if=\"menuOpen\"\n        @click.self=\"closeMenu\"\n      >\n        <nav class=\"mobile-navigation\">\n          <button class=\"close-button\" @click=\"closeMenu\">&times;</button>\n          <ul>\n            <li>\n              <router-link to=\"/\" @click.native=\"navigate\">Home</router-link>\n            </li>\n            <li>\n              <router-link to=\"/about\" @click.native=\"navigate\">About</router-link>\n            </li>\n            <li v-if=\"isAuthenticated\">\n              <router-link to=\"/dashboard\" @click.native=\"navigate\"\n                >Dashboard</router-link\n              >\n            </li>\n            <li v-if=\"isAuthenticated\">\n              <router-link to=\"/profile\" @click.native=\"navigate\"\n                >Profile</router-link\n              >\n            </li>\n            <li v-if=\"!isAuthenticated\">\n              <router-link to=\"/login\" @click.native=\"navigate\">Login</router-link>\n            </li>\n            <li v-if=\"isAuthenticated\">\n              <router-link to=\"/create-post\" @click.native=\"navigate\"\n                >Create Post</router-link\n              >\n            </li>\n            <li v-if=\"isAuthenticated\">\n              <a href=\"#\" @click.prevent=\"logoutUser\">Logout</a>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </transition>\n  </header>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\n\nexport default {\n  name: 'AppHeader',\n  data() {\n    return {\n      menuOpen: false,\n      isScrolled: false,\n    };\n  },\n  computed: {\n    ...mapGetters(['isAuthenticated']),\n  },\n  methods: {\n    ...mapActions(['logout']),\n\n    // Logout function\n    logoutUser() {\n      this.logout().then(() => {\n        this.$router.push('/login');\n        this.closeMenu();\n      });\n    },\n\n    // Toggle mobile menu\n    toggleMenu() {\n      this.menuOpen = !this.menuOpen;\n      if (this.menuOpen) {\n        document.body.style.overflow = 'hidden'; // Prevent background scroll\n      } else {\n        document.body.style.overflow = 'auto'; // Restore background scroll\n      }\n    },\n\n    // Close mobile menu\n    closeMenu() {\n      this.menuOpen = false;\n      document.body.style.overflow = 'auto'; // Restore background scroll\n    },\n\n    // Handle navigation and close menu\n    navigate() {\n      this.closeMenu();\n    },\n\n    // Handle scroll event for header\n    handleScroll() {\n      this.isScrolled = window.scrollY > 50;\n    },\n\n    // Debounce for performance improvement on scroll\n    debounce(fn, delay) {\n      let timer = null;\n      return function (...args) {\n        clearTimeout(timer);\n        timer = setTimeout(() => fn.apply(this, args), delay);\n      };\n    },\n  },\n  mounted() {\n    this.handleScroll = this.debounce(this.handleScroll, 50); // Debounced scroll handling\n    window.addEventListener('scroll', this.handleScroll);\n  },\n  beforeUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  },\n};\n</script>\n\n<style src=\"./AppHeader.css\"></style>\n"],"mappings":"AAqFA,SAAAA,UAAA,EAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,UAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAN,UAAA;EACA;EACAO,OAAA;IACA,GAAAN,UAAA;IAEA;IACAO,WAAA;MACA,KAAAC,MAAA,GAAAC,IAAA;QACA,KAAAC,OAAA,CAAAC,IAAA;QACA,KAAAC,SAAA;MACA;IACA;IAEA;IACAC,WAAA;MACA,KAAAV,QAAA,SAAAA,QAAA;MACA,SAAAA,QAAA;QACAW,QAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAC,QAAA;MACA;QACAH,QAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAC,QAAA;MACA;IACA;IAEA;IACAL,UAAA;MACA,KAAAT,QAAA;MACAW,QAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAC,QAAA;IACA;IAEA;IACAC,SAAA;MACA,KAAAN,SAAA;IACA;IAEA;IACAO,aAAA;MACA,KAAAf,UAAA,GAAAgB,MAAA,CAAAC,OAAA;IACA;IAEA;IACAC,SAAAC,EAAA,EAAAC,KAAA;MACA,IAAAC,KAAA;MACA,oBAAAC,IAAA;QACAC,YAAA,CAAAF,KAAA;QACAA,KAAA,GAAAG,UAAA,OAAAL,EAAA,CAAAM,KAAA,OAAAH,IAAA,GAAAF,KAAA;MACA;IACA;EACA;EACAM,QAAA;IACA,KAAAX,YAAA,QAAAG,QAAA,MAAAH,YAAA;IACAC,MAAA,CAAAW,gBAAA,gBAAAZ,YAAA;EACA;EACAa,cAAA;IACAZ,MAAA,CAAAa,mBAAA,gBAAAd,YAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}