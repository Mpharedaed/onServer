{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      postData: {\n        content: '',\n        tags: '',\n        image_url: '',\n        is_pinned: false\n      },\n      message: ''\n    };\n  },\n  methods: {\n    async createPost() {\n      this.message = '';\n      try {\n        const token = localStorage.getItem('token'); // Assume JWT token is stored in localStorage\n        const payload = {\n          ...this.postData,\n          tags: this.postData.tags.split(',').map(tag => tag.trim()) // Convert tags to an array\n        };\n        console.log('Payload:', payload); // Log the payload\n        const response = await axios.post('http://127.0.0.1:5000/api/posts', payload, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.message = 'Post created successfully!';\n        // Clear the form\n        this.postData = {\n          content: '',\n          tags: '',\n          image_url: '',\n          is_pinned: false\n        };\n      } catch (error) {\n        console.error('Error:', error); // Log the error\n        if (error.response) {\n          this.message = error.response.data.error;\n        } else {\n          this.message = 'An error occurred. Please try again.';\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","postData","content","tags","image_url","is_pinned","message","methods","createPost","token","localStorage","getItem","payload","split","map","tag","trim","console","log","response","post","headers","Authorization","error"],"sources":["src/components/CreatePost.vue"],"sourcesContent":["<template>\r\n    <div class=\"create-post\">\r\n      <h2>Create a New Post</h2>\r\n      <form @submit.prevent=\"createPost\">\r\n        <div class=\"form-group\">\r\n          <label for=\"content\">Content</label>\r\n          <textarea id=\"content\" v-model=\"postData.content\" required></textarea>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"tags\">Tags (comma separated)</label>\r\n          <input type=\"text\" id=\"tags\" v-model=\"postData.tags\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"image_url\">Image URL</label>\r\n          <input type=\"url\" id=\"image_url\" v-model=\"postData.image_url\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"is_pinned\">\r\n            <input type=\"checkbox\" id=\"is_pinned\" v-model=\"postData.is_pinned\" />\r\n            Pin this post\r\n          </label>\r\n        </div>\r\n        <button type=\"submit\">Create Post</button>\r\n      </form>\r\n      <div v-if=\"message\" class=\"message\">{{ message }}</div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        postData: {\r\n          content: '',\r\n          tags: '',\r\n          image_url: '',\r\n          is_pinned: false,\r\n        },\r\n        message: '',\r\n      };\r\n    },\r\n    methods: {\r\n      async createPost() {\r\n        this.message = '';\r\n        try {\r\n          const token = localStorage.getItem('token'); // Assume JWT token is stored in localStorage\r\n          const payload = {\r\n            ...this.postData,\r\n            tags: this.postData.tags.split(',').map(tag => tag.trim()) // Convert tags to an array\r\n          };\r\n          console.log('Payload:', payload); // Log the payload\r\n          const response = await axios.post('http://127.0.0.1:5000/api/posts', payload, {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          });\r\n          this.message = 'Post created successfully!';\r\n          // Clear the form\r\n          this.postData = {\r\n            content: '',\r\n            tags: '',\r\n            image_url: '',\r\n            is_pinned: false,\r\n          };\r\n        } catch (error) {\r\n          console.error('Error:', error); // Log the error\r\n          if (error.response) {\r\n            this.message = error.response.data.error;\r\n          } else {\r\n            this.message = 'An error occurred. Please try again.';\r\n          }\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .create-post {\r\n    max-width: 500px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    background: #f9f9f9;\r\n    border-radius: 8px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .form-group label {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  .form-group input,\r\n  .form-group textarea {\r\n    width: 100%;\r\n    padding: 8px;\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  button {\r\n    display: inline-block;\r\n    padding: 10px 15px;\r\n    background: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:hover {\r\n    background: #0056b3;\r\n  }\r\n  \r\n  .message {\r\n    margin-top: 20px;\r\n    color: green;\r\n  }\r\n  </style>\r\n  "],"mappings":"AA6BA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,QAAA;QACAC,OAAA;QACAC,IAAA;QACAC,SAAA;QACAC,SAAA;MACA;MACAC,OAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,WAAA;MACA,KAAAF,OAAA;MACA;QACA,MAAAG,KAAA,GAAAC,YAAA,CAAAC,OAAA;QACA,MAAAC,OAAA;UACA,QAAAX,QAAA;UACAE,IAAA,OAAAF,QAAA,CAAAE,IAAA,CAAAU,KAAA,MAAAC,GAAA,CAAAC,GAAA,IAAAA,GAAA,CAAAC,IAAA;QACA;QACAC,OAAA,CAAAC,GAAA,aAAAN,OAAA;QACA,MAAAO,QAAA,SAAApB,KAAA,CAAAqB,IAAA,oCAAAR,OAAA;UACAS,OAAA;YACAC,aAAA,YAAAb,KAAA;UACA;QACA;QACA,KAAAH,OAAA;QACA;QACA,KAAAL,QAAA;UACAC,OAAA;UACAC,IAAA;UACAC,SAAA;UACAC,SAAA;QACA;MACA,SAAAkB,KAAA;QACAN,OAAA,CAAAM,KAAA,WAAAA,KAAA;QACA,IAAAA,KAAA,CAAAJ,QAAA;UACA,KAAAb,OAAA,GAAAiB,KAAA,CAAAJ,QAAA,CAAAnB,IAAA,CAAAuB,KAAA;QACA;UACA,KAAAjB,OAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}