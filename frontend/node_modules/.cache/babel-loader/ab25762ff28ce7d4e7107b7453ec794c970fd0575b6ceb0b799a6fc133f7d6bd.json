{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      post: null\n    };\n  },\n  props: {\n    postId: {\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    async fetchPost() {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`http://localhost:5000/api/posts/${this.postId}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        this.post = response.data;\n      } catch (error) {\n        console.error('Error fetching post:', error);\n      }\n    },\n    async likePost() {\n      try {\n        const token = localStorage.getItem('token');\n        await axios.post(`http://localhost:5000/api/posts/${this.postId}/like`, {}, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        this.fetchPost(); // Refresh post\n      } catch (error) {\n        console.error('Error liking post:', error);\n      }\n    },\n    async commentPost() {\n      const comment = prompt(\"Enter your comment:\");\n      if (comment) {\n        try {\n          const token = localStorage.getItem('token');\n          await axios.post(`http://localhost:5000/api/posts/${this.postId}/comment`, {\n            comment: comment\n          }, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          this.fetchPost(); // Refresh post\n        } catch (error) {\n          console.error('Error commenting on post:', error);\n        }\n      }\n    },\n    async editPost() {\n      const newContent = prompt(\"Enter new content:\");\n      if (newContent) {\n        try {\n          const token = localStorage.getItem('token');\n          await axios.put(`http://localhost:5000/api/posts/${this.postId}`, {\n            content: newContent\n          }, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          this.fetchPost(); // Refresh post\n        } catch (error) {\n          console.error('Error editing post:', error);\n        }\n      }\n    },\n    async deletePost() {\n      if (confirm(\"Are you sure you want to delete this post?\")) {\n        try {\n          const token = localStorage.getItem('token');\n          await axios.delete(`http://localhost:5000/api/posts/${this.postId}`, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          this.$emit('postDeleted');\n        } catch (error) {\n          console.error('Error deleting post:', error);\n        }\n      }\n    }\n  },\n  mounted() {\n    this.fetchPost();\n  }\n};","map":{"version":3,"names":["axios","data","post","props","postId","type","String","required","methods","fetchPost","token","localStorage","getItem","response","get","headers","error","console","likePost","commentPost","comment","prompt","editPost","newContent","put","content","deletePost","confirm","delete","$emit","mounted"],"sources":["src/components/ViewPost.vue"],"sourcesContent":["<template>\r\n  <div class=\"view-post-container\" v-if=\"post\">\r\n    <h2>{{ post.content }}</h2>\r\n    <p><strong>Tags:</strong> {{ post.tags.join(', ') }}</p>\r\n    <p><img :src=\"post.image_url\" alt=\"Post Image\" v-if=\"post.image_url\"></p>\r\n    <button @click=\"likePost\">Like</button>\r\n    <button @click=\"commentPost\">Comment</button>\r\n    <button @click=\"editPost\">Edit</button>\r\n    <button @click=\"deletePost\">Delete</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      post: null,\r\n    };\r\n  },\r\n  props: {\r\n    postId: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchPost() {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await axios.get(`http://localhost:5000/api/posts/${this.postId}`, {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n        this.post = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching post:', error);\r\n      }\r\n    },\r\n    async likePost() {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        await axios.post(`http://localhost:5000/api/posts/${this.postId}/like`, {}, {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n        this.fetchPost(); // Refresh post\r\n      } catch (error) {\r\n        console.error('Error liking post:', error);\r\n      }\r\n    },\r\n    async commentPost() {\r\n      const comment = prompt(\"Enter your comment:\");\r\n      if (comment) {\r\n        try {\r\n          const token = localStorage.getItem('token');\r\n          await axios.post(`http://localhost:5000/api/posts/${this.postId}/comment`, {\r\n            comment: comment\r\n          }, {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n          this.fetchPost(); // Refresh post\r\n        } catch (error) {\r\n          console.error('Error commenting on post:', error);\r\n        }\r\n      }\r\n    },\r\n    async editPost() {\r\n      const newContent = prompt(\"Enter new content:\");\r\n      if (newContent) {\r\n        try {\r\n          const token = localStorage.getItem('token');\r\n          await axios.put(`http://localhost:5000/api/posts/${this.postId}`, {\r\n            content: newContent\r\n          }, {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n          this.fetchPost(); // Refresh post\r\n        } catch (error) {\r\n          console.error('Error editing post:', error);\r\n        }\r\n      }\r\n    },\r\n    async deletePost() {\r\n      if (confirm(\"Are you sure you want to delete this post?\")) {\r\n        try {\r\n          const token = localStorage.getItem('token');\r\n          await axios.delete(`http://localhost:5000/api/posts/${this.postId}`, {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n          this.$emit('postDeleted');\r\n        } catch (error) {\r\n          console.error('Error deleting post:', error);\r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchPost();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.view-post-container {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding: 1rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n</style>\r\n"],"mappings":"AAaA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;IACA;EACA;EACAC,KAAA;IACAC,MAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,UAAA;MACA;QACA,MAAAC,KAAA,GAAAC,YAAA,CAAAC,OAAA;QACA,MAAAC,QAAA,SAAAb,KAAA,CAAAc,GAAA,yCAAAV,MAAA;UACAW,OAAA;YACA,2BAAAL,KAAA;UACA;QACA;QACA,KAAAR,IAAA,GAAAW,QAAA,CAAAZ,IAAA;MACA,SAAAe,KAAA;QACAC,OAAA,CAAAD,KAAA,yBAAAA,KAAA;MACA;IACA;IACA,MAAAE,SAAA;MACA;QACA,MAAAR,KAAA,GAAAC,YAAA,CAAAC,OAAA;QACA,MAAAZ,KAAA,CAAAE,IAAA,yCAAAE,MAAA;UACAW,OAAA;YACA,2BAAAL,KAAA;UACA;QACA;QACA,KAAAD,SAAA;MACA,SAAAO,KAAA;QACAC,OAAA,CAAAD,KAAA,uBAAAA,KAAA;MACA;IACA;IACA,MAAAG,YAAA;MACA,MAAAC,OAAA,GAAAC,MAAA;MACA,IAAAD,OAAA;QACA;UACA,MAAAV,KAAA,GAAAC,YAAA,CAAAC,OAAA;UACA,MAAAZ,KAAA,CAAAE,IAAA,yCAAAE,MAAA;YACAgB,OAAA,EAAAA;UACA;YACAL,OAAA;cACA,2BAAAL,KAAA;YACA;UACA;UACA,KAAAD,SAAA;QACA,SAAAO,KAAA;UACAC,OAAA,CAAAD,KAAA,8BAAAA,KAAA;QACA;MACA;IACA;IACA,MAAAM,SAAA;MACA,MAAAC,UAAA,GAAAF,MAAA;MACA,IAAAE,UAAA;QACA;UACA,MAAAb,KAAA,GAAAC,YAAA,CAAAC,OAAA;UACA,MAAAZ,KAAA,CAAAwB,GAAA,yCAAApB,MAAA;YACAqB,OAAA,EAAAF;UACA;YACAR,OAAA;cACA,2BAAAL,KAAA;YACA;UACA;UACA,KAAAD,SAAA;QACA,SAAAO,KAAA;UACAC,OAAA,CAAAD,KAAA,wBAAAA,KAAA;QACA;MACA;IACA;IACA,MAAAU,WAAA;MACA,IAAAC,OAAA;QACA;UACA,MAAAjB,KAAA,GAAAC,YAAA,CAAAC,OAAA;UACA,MAAAZ,KAAA,CAAA4B,MAAA,yCAAAxB,MAAA;YACAW,OAAA;cACA,2BAAAL,KAAA;YACA;UACA;UACA,KAAAmB,KAAA;QACA,SAAAb,KAAA;UACAC,OAAA,CAAAD,KAAA,yBAAAA,KAAA;QACA;MACA;IACA;EACA;EACAc,QAAA;IACA,KAAArB,SAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}