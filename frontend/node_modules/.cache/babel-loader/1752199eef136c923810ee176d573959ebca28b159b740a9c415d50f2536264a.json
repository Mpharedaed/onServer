{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      posts: [],\n      friends: [],\n      user: null,\n      error: null,\n      activeTab: 'posts'\n    };\n  },\n  created() {\n    this.fetchUserProfile();\n  },\n  methods: {\n    async fetchUserProfile() {\n      if (this.isAuthenticated) {\n        this.user = this.$store.getters.getUser;\n        if (this.user) {\n          console.log('User data:', this.user);\n          await this.fetchUserPosts();\n          await this.fetchUserFriends();\n        } else {\n          this.error = 'User data not found.';\n        }\n      } else {\n        this.error = 'You need to be logged in to view this page.';\n      }\n    },\n    async fetchUserPosts() {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/api/user/posts', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        this.posts = response.data.posts;\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    },\n    async fetchUserFriends() {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/api/user/friends', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        this.friends = response.data.friends;\n      } catch (error) {\n        console.error('Error fetching friends:', error);\n      }\n    },\n    async likePost(post) {\n      try {\n        await axios.post(`http://127.0.0.1:5000/api/user/posts/${post.id}/like`, {}, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        post.likes += 1;\n      } catch (error) {\n        console.error('Error liking post:', error);\n      }\n    },\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    async updateSettings() {\n      try {\n        const response = await axios.put('http://127.0.0.1:5000/api/user/settings', this.user, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        this.user = response.data.user;\n        alert('Settings updated successfully');\n      } catch (error) {\n        console.error('Error updating settings:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","posts","friends","user","error","activeTab","created","fetchUserProfile","methods","isAuthenticated","$store","getters","getUser","console","log","fetchUserPosts","fetchUserFriends","response","get","headers","Authorization","localStorage","getItem","likePost","post","id","likes","formatDate","date","options","year","month","day","Date","toLocaleDateString","undefined","updateSettings","put","alert"],"sources":["src/components/UserProfile.vue"],"sourcesContent":["<template>\r\n  <div class=\"profile-container\" v-if=\"user\">\r\n    <!-- User Info Section -->\r\n    <div class=\"user-info-container\">\r\n      <img :src=\"user.avatar || 'default-avatar.png'\" alt=\"User Avatar\" class=\"avatar-large\">\r\n      <div class=\"user-details\">\r\n        <h1 class=\"username\">{{ user.name || 'Anonymous' }}</h1>\r\n        <p class=\"user-bio\">{{ user.bio || 'No bio available' }}</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Navigation Tabs -->\r\n    <div class=\"profile-nav\">\r\n      <button @click=\"activeTab = 'posts'\" :class=\"{ active: activeTab === 'posts' }\">Posts</button>\r\n      <button @click=\"activeTab = 'friends'\" :class=\"{ active: activeTab === 'friends' }\">Friends</button>\r\n      <button @click=\"activeTab = 'settings'\" :class=\"{ active: activeTab === 'settings' }\">Settings</button>\r\n    </div>\r\n\r\n    <!-- Posts Section -->\r\n    <div v-if=\"activeTab === 'posts'\" class=\"posts-container\">\r\n      <h2 class=\"section-title\">My Posts</h2>\r\n      <ul class=\"post-list\">\r\n        <li v-for=\"post in posts\" :key=\"post.id\" class=\"post-item\">\r\n          <div class=\"post-header\" v-if=\"post.user\">\r\n            <img :src=\"post.user.avatar || 'default-avatar.png'\" alt=\"User Avatar\" class=\"avatar\">\r\n            <div class=\"user-info\">\r\n              <h3 class=\"username\">{{ post.user.name || 'Anonymous' }}</h3>\r\n              <p class=\"post-date\">{{ formatDate(post.date) }}</p>\r\n            </div>\r\n          </div>\r\n          <div class=\"post-content\">{{ post.content }}</div>\r\n          <div class=\"post-actions\">\r\n            <button @click=\"likePost(post)\" class=\"like-button\">üëç Like</button>\r\n            <span class=\"like-count\">{{ post.likes }} Likes</span>\r\n            <button class=\"comment-button\">üí¨ Comment</button>\r\n            <button class=\"share-button\">üîó Share</button>\r\n          </div>\r\n          <div class=\"comment-section\">\r\n            <input type=\"text\" class=\"comment-input\" placeholder=\"Write a comment...\" />\r\n          </div>\r\n        </li>\r\n      </ul>\r\n      <p v-if=\"posts.length === 0\" class=\"no-posts\">You have no posts.</p>\r\n    </div>\r\n\r\n    <!-- Friends Section -->\r\n    <div v-if=\"activeTab === 'friends'\" class=\"friends-container\">\r\n      <h2 class=\"section-title\">Friends</h2>\r\n      <ul class=\"friends-list\">\r\n        <li v-for=\"friend in friends\" :key=\"friend.id\" class=\"friend-item\">\r\n          <img :src=\"friend.avatar || 'default-avatar.png'\" alt=\"Friend Avatar\" class=\"avatar-small\">\r\n          <div class=\"friend-info\">\r\n            <h3 class=\"friend-name\">{{ friend.name }}</h3>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n      <p v-if=\"friends.length === 0\" class=\"no-friends\">You have no friends.</p>\r\n    </div>\r\n\r\n    <!-- Settings Section -->\r\n    <div v-if=\"activeTab === 'settings'\" class=\"settings-container\">\r\n      <h2 class=\"section-title\">Settings</h2>\r\n      <form @submit.prevent=\"updateSettings\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"text\" id=\"username\" v-model=\"user.name\">\r\n\r\n        <label for=\"bio\">Bio</label>\r\n        <textarea id=\"bio\" v-model=\"user.bio\"></textarea>\r\n\r\n        <button type=\"submit\" class=\"save-button\">Save Changes</button>\r\n      </form>\r\n    </div>\r\n\r\n    <!-- Error Message -->\r\n    <div v-if=\"error\" class=\"error-message\">{{ error }}</div>\r\n  </div>\r\n  <div v-else class=\"loading-container\">\r\n    <p>Loading user data...</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      posts: [],\r\n      friends: [],\r\n      user: null,\r\n      error: null,\r\n      activeTab: 'posts',\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchUserProfile();\r\n  },\r\n  methods: {\r\n    async fetchUserProfile() {\r\n      if (this.isAuthenticated) {\r\n        this.user = this.$store.getters.getUser;\r\n        if (this.user) {\r\n          console.log('User data:', this.user);\r\n          await this.fetchUserPosts();\r\n          await this.fetchUserFriends();\r\n        } else {\r\n          this.error = 'User data not found.';\r\n        }\r\n      } else {\r\n        this.error = 'You need to be logged in to view this page.';\r\n      }\r\n    },\r\n    async fetchUserPosts() {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:5000/api/user/posts', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        this.posts = response.data.posts;\r\n      } catch (error) {\r\n        console.error('Error fetching posts:', error);\r\n      }\r\n    },\r\n    async fetchUserFriends() {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:5000/api/user/friends', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        this.friends = response.data.friends;\r\n      } catch (error) {\r\n        console.error('Error fetching friends:', error);\r\n      }\r\n    },\r\n    async likePost(post) {\r\n      try {\r\n        await axios.post(`http://127.0.0.1:5000/api/user/posts/${post.id}/like`, {}, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        post.likes += 1;\r\n      } catch (error) {\r\n        console.error('Error liking post:', error);\r\n      }\r\n    },\r\n    formatDate(date) {\r\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n      return new Date(date).toLocaleDateString(undefined, options);\r\n    },\r\n    async updateSettings() {\r\n      try {\r\n        const response = await axios.put('http://127.0.0.1:5000/api/user/settings', this.user, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        this.user = response.data.user;\r\n        alert('Settings updated successfully');\r\n      } catch (error) {\r\n        console.error('Error updating settings:', error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.profile-container {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  background: #f0f2f5;\r\n  border-radius: 10px;\r\n}\r\n\r\n.user-info-container {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 10px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.avatar-large {\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50%;\r\n  margin-right: 20px;\r\n}\r\n\r\n.user-details {\r\n  flex-grow: 1;\r\n}\r\n\r\n.username {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin: 0;\r\n}\r\n\r\n.user-bio {\r\n  font-size: 16px;\r\n  color: #666;\r\n}\r\n\r\n.profile-nav {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.profile-nav button {\r\n  padding: 10px 20px;\r\n  border: none;\r\n  background: #007bff;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  border-radius: 20px;\r\n  font-size: 16px;\r\n}\r\n\r\n.profile-nav button.active {\r\n  background: #0056b3;\r\n}\r\n\r\n.section-title {\r\n  font-size: 22px;\r\n  margin-bottom: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.posts-container, .friends-container, .settings-container {\r\n  background: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.post-list, .friends-list {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\n.post-item, .friend-item {\r\n  background: #f9f9f9;\r\n  padding: 15px;\r\n  margin-bottom: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.post-header, .friend-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.avatar, .avatar-small {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.post-content, .friend-name {\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n\r\n.post-actions, .comment-section, .error-message {\r\n  border-top: 1px solid #e1e4e8;\r\n  padding-top: 10px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.like-button, .comment-button, .share-button {\r\n  background: none;\r\n  border: none;\r\n  color: #007bff;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.like-button:hover, .comment-button:hover, .share-button:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.like-count, .no-posts, .no-friends {\r\n  font-size: 14px;\r\n  color: #555;\r\n}\r\n\r\n.comment-input {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 20px;\r\n  background: #f0f2f5;\r\n}\r\n\r\n.settings-container label {\r\n  display: block;\r\n  font-size: 14px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.settings-container input, .settings-container textarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #e1e4e8;\r\n  border-radius: 5px;\r\n}\r\n\r\n.save-button {\r\n  padding: 10px 20px;\r\n  border: none;\r\n  background: #28a745;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n}\r\n\r\n.error-message {\r\n  color: #ff4d4d;\r\n  text-align: center;\r\n  font-size: 16px;\r\n}\r\n</style>\r\n"],"mappings":"AAkFA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,OAAA;MACAC,IAAA;MACAC,KAAA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;EACA;EACAC,OAAA;IACA,MAAAD,iBAAA;MACA,SAAAE,eAAA;QACA,KAAAN,IAAA,QAAAO,MAAA,CAAAC,OAAA,CAAAC,OAAA;QACA,SAAAT,IAAA;UACAU,OAAA,CAAAC,GAAA,oBAAAX,IAAA;UACA,WAAAY,cAAA;UACA,WAAAC,gBAAA;QACA;UACA,KAAAZ,KAAA;QACA;MACA;QACA,KAAAA,KAAA;MACA;IACA;IACA,MAAAW,eAAA;MACA;QACA,MAAAE,QAAA,SAAAlB,KAAA,CAAAmB,GAAA;UACAC,OAAA;YACAC,aAAA,YAAAC,YAAA,CAAAC,OAAA;UACA;QACA;QACA,KAAArB,KAAA,GAAAgB,QAAA,CAAAjB,IAAA,CAAAC,KAAA;MACA,SAAAG,KAAA;QACAS,OAAA,CAAAT,KAAA,0BAAAA,KAAA;MACA;IACA;IACA,MAAAY,iBAAA;MACA;QACA,MAAAC,QAAA,SAAAlB,KAAA,CAAAmB,GAAA;UACAC,OAAA;YACAC,aAAA,YAAAC,YAAA,CAAAC,OAAA;UACA;QACA;QACA,KAAApB,OAAA,GAAAe,QAAA,CAAAjB,IAAA,CAAAE,OAAA;MACA,SAAAE,KAAA;QACAS,OAAA,CAAAT,KAAA,4BAAAA,KAAA;MACA;IACA;IACA,MAAAmB,SAAAC,IAAA;MACA;QACA,MAAAzB,KAAA,CAAAyB,IAAA,yCAAAA,IAAA,CAAAC,EAAA;UACAN,OAAA;YACAC,aAAA,YAAAC,YAAA,CAAAC,OAAA;UACA;QACA;QACAE,IAAA,CAAAE,KAAA;MACA,SAAAtB,KAAA;QACAS,OAAA,CAAAT,KAAA,uBAAAA,KAAA;MACA;IACA;IACAuB,WAAAC,IAAA;MACA,MAAAC,OAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,GAAA;MAAA;MACA,WAAAC,IAAA,CAAAL,IAAA,EAAAM,kBAAA,CAAAC,SAAA,EAAAN,OAAA;IACA;IACA,MAAAO,eAAA;MACA;QACA,MAAAnB,QAAA,SAAAlB,KAAA,CAAAsC,GAAA,iDAAAlC,IAAA;UACAgB,OAAA;YACAC,aAAA,YAAAC,YAAA,CAAAC,OAAA;UACA;QACA;QACA,KAAAnB,IAAA,GAAAc,QAAA,CAAAjB,IAAA,CAAAG,IAAA;QACAmC,KAAA;MACA,SAAAlC,KAAA;QACAS,OAAA,CAAAT,KAAA,6BAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}