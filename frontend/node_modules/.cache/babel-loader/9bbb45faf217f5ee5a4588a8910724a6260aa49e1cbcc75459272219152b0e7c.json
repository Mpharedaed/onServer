{"ast":null,"code":"import axiosInstance from \"@/plugins/axios\";\nexport default {\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      errorMessage: \"\",\n      resetPasswordLink: false\n    };\n  },\n  methods: {\n    async submitForm() {\n      this.errorMessage = \"\";\n      this.resetPasswordLink = false;\n\n      // Debugging: Log the data being sent\n      console.log(\"Submitting form with email:\", this.username);\n      console.log(\"Password:\", this.password);\n      try {\n        const response = await axiosInstance.post(\"/login\", {\n          email: this.username,\n          password: this.password\n        });\n\n        // Debugging: Log the response received from backend\n        console.log(\"Response from backend:\", response);\n        if (response.data.token) {\n          localStorage.setItem(\"token\", response.data.token);\n          this.$store.dispatch(\"login\", response.data.token);\n          this.$router.push(\"/dashboard\");\n        } else {\n          this.errorMessage = response.data.message || \"An error occurred. Please try again.\";\n          // Debugging: Log in case token is missing in response\n          console.log(\"No token received, response:\", response);\n        }\n      } catch (error) {\n        // Debugging: Log the full error object\n        console.log(\"Error during login request:\", error);\n        if (error.response) {\n          // Log specific error response for easier debugging\n          console.log(\"Error response status:\", error.response.status);\n          console.log(\"Error response data:\", error.response.data);\n        }\n        if (error.response && error.response.status === 401 && error.response.data.message === \"Email not confirmed\") {\n          this.errorMessage = \"Email not verified. Please check your email to verify your account.\";\n        } else if (error.response && error.response.status === 404) {\n          this.errorMessage = \"User not found. Please register first.\";\n        } else if (error.response && error.response.status === 401) {\n          this.errorMessage = error.response.data.message;\n          this.resetPasswordLink = true;\n        } else {\n          this.errorMessage = error.response ? error.response.data.message : \"An error occurred. Please try again.\";\n        }\n      }\n    },\n    async resendVerificationEmail() {\n      try {\n        const response = await axiosInstance.post(\"/resend-verification\", {\n          email: this.username\n        });\n        // Debugging: Log resend verification response\n        console.log(\"Resend verification response:\", response);\n        alert(response.data.message);\n      } catch (error) {\n        // Debugging: Log errors in resend verification\n        console.log(\"Error during resend verification:\", error);\n        if (error.response && error.response.status === 429) {\n          alert(\"You have exceeded the number of allowed requests. Please try again later.\");\n        } else {\n          alert(error.response ? error.response.data.message : \"An error occurred. Please try again.\");\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axiosInstance","data","username","password","errorMessage","resetPasswordLink","methods","submitForm","console","log","response","post","email","token","localStorage","setItem","$store","dispatch","$router","push","message","error","status","resendVerificationEmail","alert"],"sources":["src/components/LoginForm.vue"],"sourcesContent":["<template>\n  <div class=\"login-page\">\n    <div class=\"login-container\">\n      <div class=\"form-section\">\n        <h1>Welcome Back</h1>\n        <p class=\"subtitle\">Please login to continue</p>\n        <form @submit.prevent=\"submitForm\">\n          <div class=\"form-group\">\n            <label for=\"username\">Username</label>\n            <input type=\"text\" id=\"username\" v-model=\"username\" required />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" v-model=\"password\" required />\n          </div>\n          <button type=\"submit\" class=\"login-button\">Login</button>\n        </form>\n        <p v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</p>\n        <p v-if=\"resetPasswordLink\" class=\"reset-link\">\n          Forgot your password? <router-link :to=\"{ name: 'ResetPasswordRequest' }\">Reset it here</router-link>\n        </p>\n        <p v-if=\"errorMessage === 'Email not verified. Please check your email to verify your account.'\">\n          Didn't receive an email? <button @click=\"resendVerificationEmail\">Resend Verification Email</button>\n        </p>\n        <p class=\"signup-text\">Don't have an account? <router-link to=\"/signup\">Sign Up</router-link></p>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport axiosInstance from \"@/plugins/axios\";\n\nexport default {\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      errorMessage: \"\",\n      resetPasswordLink: false,\n    };\n  },\n  methods: {\n    async submitForm() {\n      this.errorMessage = \"\";\n      this.resetPasswordLink = false;\n\n      // Debugging: Log the data being sent\n      console.log(\"Submitting form with email:\", this.username);\n      console.log(\"Password:\", this.password);\n\n      try {\n        const response = await axiosInstance.post(\"/login\", {\n          email: this.username,\n          password: this.password,\n        });\n\n        // Debugging: Log the response received from backend\n        console.log(\"Response from backend:\", response);\n\n        if (response.data.token) {\n          localStorage.setItem(\"token\", response.data.token);\n          this.$store.dispatch(\"login\", response.data.token);\n          this.$router.push(\"/dashboard\");\n        } else {\n          this.errorMessage = response.data.message || \"An error occurred. Please try again.\";\n          // Debugging: Log in case token is missing in response\n          console.log(\"No token received, response:\", response);\n        }\n      } catch (error) {\n        // Debugging: Log the full error object\n        console.log(\"Error during login request:\", error);\n\n        if (error.response) {\n          // Log specific error response for easier debugging\n          console.log(\"Error response status:\", error.response.status);\n          console.log(\"Error response data:\", error.response.data);\n        }\n\n        if (\n          error.response &&\n          error.response.status === 401 &&\n          error.response.data.message === \"Email not confirmed\"\n        ) {\n          this.errorMessage =\n            \"Email not verified. Please check your email to verify your account.\";\n        } else if (error.response && error.response.status === 404) {\n          this.errorMessage = \"User not found. Please register first.\";\n        } else if (error.response && error.response.status === 401) {\n          this.errorMessage = error.response.data.message;\n          this.resetPasswordLink = true;\n        } else {\n          this.errorMessage = error.response\n            ? error.response.data.message\n            : \"An error occurred. Please try again.\";\n        }\n      }\n    },\n    async resendVerificationEmail() {\n      try {\n        const response = await axiosInstance.post(\"/resend-verification\", {\n          email: this.username,\n        });\n        // Debugging: Log resend verification response\n        console.log(\"Resend verification response:\", response);\n        alert(response.data.message);\n      } catch (error) {\n        // Debugging: Log errors in resend verification\n        console.log(\"Error during resend verification:\", error);\n\n        if (error.response && error.response.status === 429) {\n          alert(\"You have exceeded the number of allowed requests. Please try again later.\");\n        } else {\n          alert(\n            error.response\n              ? error.response.data.message\n              : \"An error occurred. Please try again.\"\n          );\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;700&display=swap\");\n\n.login-page {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9 0%, #e3eeff 100%);\n  font-family: \"Poppins\", sans-serif;\n  padding: 20px;\n  box-sizing: border-box;\n}\n\n.login-container {\n  background-color: white;\n  border-radius: 15px;\n  padding: 40px;\n  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);\n  max-width: 400px;\n  width: 100%;\n  text-align: center;\n  position: relative;\n  overflow: hidden;\n}\n\n.login-container::before {\n  content: \"\";\n  position: absolute;\n  width: 150%;\n  height: 150%;\n  background: linear-gradient(45deg, #6c63ff, #f59e42);\n  top: -75%;\n  left: -75%;\n  transform: rotate(45deg);\n  z-index: 1;\n  opacity: 0.15;\n}\n\n.login-container:hover {\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);\n}\n\n.form-section h1 {\n  margin-bottom: 15px;\n  font-size: 28px;\n  font-weight: 700;\n  color: #333;\n  position: relative;\n  z-index: 2;\n}\n\n.subtitle {\n  font-size: 16px;\n  color: #888;\n  margin-bottom: 30px;\n  position: relative;\n  z-index: 2;\n}\n\n.form-group {\n  margin-bottom: 20px;\n  position: relative;\n  z-index: 2;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  color: #333;\n  font-weight: 500;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 12px;\n  border: 1px solid #ddd;\n  border-radius: 30px;\n  box-sizing: border-box;\n  font-size: 16px;\n  transition: border-color 0.3s ease;\n}\n\n.form-group input:focus {\n  border-color: #6c63ff;\n  outline: none;\n}\n\n.login-button {\n  width: 100%;\n  padding: 12px;\n  background-color: #6c63ff;\n  color: white;\n  border: none;\n  border-radius: 30px;\n  cursor: pointer;\n  font-size: 16px;\n  margin-top: 20px;\n  font-weight: 500;\n  transition: background-color 0.3s, transform 0.3s;\n}\n\n.login-button:hover {\n  background-color: #4a4ae1;\n  transform: translateY(-2px);\n}\n\n.signup-text {\n  margin-top: 20px;\n  font-size: 14px;\n  position: relative;\n  z-index: 2;\n}\n\n.signup-text a {\n  color: #6c63ff;\n  text-decoration: none;\n}\n\n.signup-text a:hover {\n  text-decoration: underline;\n}\n\n.error {\n  margin-top: 20px;\n  font-size: 14px;\n  color: red;\n  text-align: center;\n  position: relative;\n  z-index: 2;\n}\n\n.reset-link {\n  margin-top: 10px;\n  text-align: center;\n  font-size: 14px;\n  color: #6c63ff;\n  position: relative;\n  z-index: 2;\n}\n\n.reset-link a {\n  color: #6c63ff;\n}\n\n@media (max-width: 768px) {\n  .login-container {\n    padding: 20px;\n  }\n\n  .form-section h1 {\n    font-size: 24px;\n  }\n\n  .form-group input {\n    padding: 10px;\n  }\n\n  .login-button {\n    padding: 10px;\n    font-size: 14px;\n  }\n\n  .signup-text {\n    font-size: 12px;\n  }\n\n  .reset-link {\n    font-size: 12px;\n  }\n}\n</style>\n"],"mappings":"AA8BA,OAAAA,aAAA;AAEA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,QAAA;MACAC,YAAA;MACAC,iBAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,WAAA;MACA,KAAAH,YAAA;MACA,KAAAC,iBAAA;;MAEA;MACAG,OAAA,CAAAC,GAAA,qCAAAP,QAAA;MACAM,OAAA,CAAAC,GAAA,mBAAAN,QAAA;MAEA;QACA,MAAAO,QAAA,SAAAV,aAAA,CAAAW,IAAA;UACAC,KAAA,OAAAV,QAAA;UACAC,QAAA,OAAAA;QACA;;QAEA;QACAK,OAAA,CAAAC,GAAA,2BAAAC,QAAA;QAEA,IAAAA,QAAA,CAAAT,IAAA,CAAAY,KAAA;UACAC,YAAA,CAAAC,OAAA,UAAAL,QAAA,CAAAT,IAAA,CAAAY,KAAA;UACA,KAAAG,MAAA,CAAAC,QAAA,UAAAP,QAAA,CAAAT,IAAA,CAAAY,KAAA;UACA,KAAAK,OAAA,CAAAC,IAAA;QACA;UACA,KAAAf,YAAA,GAAAM,QAAA,CAAAT,IAAA,CAAAmB,OAAA;UACA;UACAZ,OAAA,CAAAC,GAAA,iCAAAC,QAAA;QACA;MACA,SAAAW,KAAA;QACA;QACAb,OAAA,CAAAC,GAAA,gCAAAY,KAAA;QAEA,IAAAA,KAAA,CAAAX,QAAA;UACA;UACAF,OAAA,CAAAC,GAAA,2BAAAY,KAAA,CAAAX,QAAA,CAAAY,MAAA;UACAd,OAAA,CAAAC,GAAA,yBAAAY,KAAA,CAAAX,QAAA,CAAAT,IAAA;QACA;QAEA,IACAoB,KAAA,CAAAX,QAAA,IACAW,KAAA,CAAAX,QAAA,CAAAY,MAAA,YACAD,KAAA,CAAAX,QAAA,CAAAT,IAAA,CAAAmB,OAAA,4BACA;UACA,KAAAhB,YAAA,GACA;QACA,WAAAiB,KAAA,CAAAX,QAAA,IAAAW,KAAA,CAAAX,QAAA,CAAAY,MAAA;UACA,KAAAlB,YAAA;QACA,WAAAiB,KAAA,CAAAX,QAAA,IAAAW,KAAA,CAAAX,QAAA,CAAAY,MAAA;UACA,KAAAlB,YAAA,GAAAiB,KAAA,CAAAX,QAAA,CAAAT,IAAA,CAAAmB,OAAA;UACA,KAAAf,iBAAA;QACA;UACA,KAAAD,YAAA,GAAAiB,KAAA,CAAAX,QAAA,GACAW,KAAA,CAAAX,QAAA,CAAAT,IAAA,CAAAmB,OAAA,GACA;QACA;MACA;IACA;IACA,MAAAG,wBAAA;MACA;QACA,MAAAb,QAAA,SAAAV,aAAA,CAAAW,IAAA;UACAC,KAAA,OAAAV;QACA;QACA;QACAM,OAAA,CAAAC,GAAA,kCAAAC,QAAA;QACAc,KAAA,CAAAd,QAAA,CAAAT,IAAA,CAAAmB,OAAA;MACA,SAAAC,KAAA;QACA;QACAb,OAAA,CAAAC,GAAA,sCAAAY,KAAA;QAEA,IAAAA,KAAA,CAAAX,QAAA,IAAAW,KAAA,CAAAX,QAAA,CAAAY,MAAA;UACAE,KAAA;QACA;UACAA,KAAA,CACAH,KAAA,CAAAX,QAAA,GACAW,KAAA,CAAAX,QAAA,CAAAT,IAAA,CAAAmB,OAAA,GACA,sCACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}