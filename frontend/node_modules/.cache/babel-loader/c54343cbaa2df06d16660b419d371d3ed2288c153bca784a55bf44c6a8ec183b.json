{"ast":null,"code":"import Vue from 'vue';\nimport Router from 'vue-router';\nimport HomePage from '@/views/HomePage.vue';\nimport AboutPage from '@/views/AboutPage.vue';\nimport LoginForm from '@/components/LoginForm.vue';\nimport SignupForm from '@/components/SignupForm.vue';\nimport UserDashboard from '@/components/UserDashboard.vue';\nimport CreatePost from '@/components/CreatePost.vue';\nimport UserProfile from '@/components/UserProfile.vue';\nimport store from '@/store'; // Ensure the store is correctly imported\n\nVue.use(Router);\nconst routes = [{\n  path: '/',\n  name: 'Home',\n  component: HomePage\n}, {\n  path: '/about',\n  name: 'About',\n  component: AboutPage\n}, {\n  path: '/dashboard',\n  name: 'UserDashboard',\n  component: UserDashboard,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/login',\n  name: 'Login',\n  component: LoginForm\n}, {\n  path: '/signup',\n  name: 'Signup',\n  component: SignupForm\n}, {\n  path: '/create-post',\n  name: 'CreatePost',\n  component: CreatePost,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/profile',\n  name: 'UserProfile',\n  component: UserProfile,\n  meta: {\n    requiresAuth: true\n  }\n}];\nconst router = new Router({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\nrouter.beforeEach(async (to, from, next) => {\n  const isAuthenticated = store.getters.isAuthenticated;\n  console.log(`Navigating to ${to.path} from ${from.path}. Logged in: ${isAuthenticated}`);\n\n  // If not authenticated and token exists, fetch user data\n  if (!isAuthenticated && localStorage.getItem('token')) {\n    try {\n      console.log('Fetching user data...');\n      await store.dispatch('fetchUser');\n      console.log('User data fetched successfully');\n    } catch (error) {\n      console.error('Failed to fetch user data:', error);\n      store.commit('LOGOUT');\n    }\n  }\n\n  // Check if the route requires authentication\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    if (!store.getters.isAuthenticated) {\n      console.log(`Access to ${to.path} requires auth. Redirecting to login.`);\n      return next({\n        name: 'Login'\n      });\n    }\n  }\n\n  // If trying to access login or signup page while authenticated, redirect to dashboard\n  if ((to.path === '/login' || to.path === '/signup') && store.getters.isAuthenticated) {\n    console.log(`Already logged in. Redirecting to dashboard.`);\n    return next({\n      name: 'UserDashboard'\n    });\n  }\n  next();\n});\nexport default router;","map":{"version":3,"names":["Vue","Router","HomePage","AboutPage","LoginForm","SignupForm","UserDashboard","CreatePost","UserProfile","store","use","routes","path","name","component","meta","requiresAuth","router","mode","base","process","env","BASE_URL","beforeEach","to","from","next","isAuthenticated","getters","console","log","localStorage","getItem","dispatch","error","commit","matched","some","record"],"sources":["C:/Users/moham/Desktop/bicobico1 - Copy/frontend/src/router/index.js"],"sourcesContent":["import Vue from 'vue';\r\nimport Router from 'vue-router';\r\nimport HomePage from '@/views/HomePage.vue';\r\nimport AboutPage from '@/views/AboutPage.vue';\r\nimport LoginForm from '@/components/LoginForm.vue';\r\nimport SignupForm from '@/components/SignupForm.vue';\r\nimport UserDashboard from '@/components/UserDashboard.vue';\r\nimport CreatePost from '@/components/CreatePost.vue';\r\nimport UserProfile from '@/components/UserProfile.vue';\r\nimport store from '@/store'; // Ensure the store is correctly imported\r\n\r\nVue.use(Router);\r\n\r\nconst routes = [\r\n  { path: '/', name: 'Home', component: HomePage },\r\n  { path: '/about', name: 'About', component: AboutPage },\r\n  { path: '/dashboard', name: 'UserDashboard', component: UserDashboard, meta: { requiresAuth: true } },\r\n  { path: '/login', name: 'Login', component: LoginForm },\r\n  { path: '/signup', name: 'Signup', component: SignupForm },\r\n  { path: '/create-post', name: 'CreatePost', component: CreatePost, meta: { requiresAuth: true } },\r\n  { path: '/profile', name: 'UserProfile', component: UserProfile, meta: { requiresAuth: true } }\r\n];\r\n\r\nconst router = new Router({\r\n  mode: 'history',\r\n  base: process.env.BASE_URL,\r\n  routes\r\n});\r\n\r\nrouter.beforeEach(async (to, from, next) => {\r\n  const isAuthenticated = store.getters.isAuthenticated;\r\n  console.log(`Navigating to ${to.path} from ${from.path}. Logged in: ${isAuthenticated}`);\r\n\r\n  // If not authenticated and token exists, fetch user data\r\n  if (!isAuthenticated && localStorage.getItem('token')) {\r\n    try {\r\n      console.log('Fetching user data...');\r\n      await store.dispatch('fetchUser');\r\n      console.log('User data fetched successfully');\r\n    } catch (error) {\r\n      console.error('Failed to fetch user data:', error);\r\n      store.commit('LOGOUT');\r\n    }\r\n  }\r\n\r\n  // Check if the route requires authentication\r\n  if (to.matched.some(record => record.meta.requiresAuth)) {\r\n    if (!store.getters.isAuthenticated) {\r\n      console.log(`Access to ${to.path} requires auth. Redirecting to login.`);\r\n      return next({ name: 'Login' });\r\n    }\r\n  }\r\n\r\n  // If trying to access login or signup page while authenticated, redirect to dashboard\r\n  if ((to.path === '/login' || to.path === '/signup') && store.getters.isAuthenticated) {\r\n    console.log(`Already logged in. Redirecting to dashboard.`);\r\n    return next({ name: 'UserDashboard' });\r\n  }\r\n\r\n  next();\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}