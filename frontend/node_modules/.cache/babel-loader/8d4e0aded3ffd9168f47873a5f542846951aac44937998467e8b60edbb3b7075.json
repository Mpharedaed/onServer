{"ast":null,"code":"export default {\n  name: 'StoryModal',\n  props: {\n    showStory: Boolean\n  },\n  data() {\n    return {\n      showQuestionnaire: false,\n      currentStep: 0,\n      answers: {},\n      feedbackMessage: '',\n      questions: [/* Your questions as defined above */],\n      questionImages: [\n      // Add URLs or paths to the images/icons related to each question\n      '/images/question1.png', '/images/question2.png', '/images/question3.png'\n      // Add more as needed...\n      ]\n    };\n  },\n  computed: {\n    currentQuestion() {\n      return this.questions[this.currentStep];\n    },\n    isLastStep() {\n      return this.currentStep === this.questions.length - 1;\n    },\n    isStepValid() {\n      // Validate current step inputs\n    },\n    progressPercentage() {\n      return Math.round((this.currentStep + 1) / this.questions.length * 100);\n    }\n  },\n  methods: {\n    initializeAnswer(step) {\n      const question = this.questions[step];\n      if (this.answers[step] === undefined) {\n        if (question.type === 'checkbox') {\n          this.$set(this.answers, step, []);\n        } else {\n          this.$set(this.answers, step, '');\n        }\n      }\n    },\n    getQuestionImage(step) {\n      return this.questionImages[step] || '/images/default.png'; // Fallback to a default image\n    },\n    closeModal() {\n      this.$emit('close');\n      this.showQuestionnaire = false;\n      this.currentStep = 0;\n      this.answers = {};\n      this.feedbackMessage = '';\n      document.body.style.overflow = 'auto';\n    },\n    openQuestionnaire() {\n      this.showQuestionnaire = true;\n      this.currentStep = 0;\n      this.answers = {};\n      this.feedbackMessage = '';\n      this.initializeAnswer(this.currentStep);\n    },\n    nextStep() {\n      if (this.isStepValid) {\n        this.provideFeedback();\n        if (this.currentStep < this.questions.length - 1) {\n          setTimeout(() => {\n            this.currentStep++;\n            this.initializeAnswer(this.currentStep);\n            this.feedbackMessage = '';\n          }, 500);\n        }\n      }\n    },\n    prevStep() {\n      if (this.currentStep > 0) {\n        this.currentStep--;\n        this.feedbackMessage = '';\n      }\n    },\n    submit() {\n      if (this.isStepValid) {\n        const userData = {\n          answers: this.answers,\n          email: this.answers[this.questions.length - 2],\n          // Assuming email is the second last question\n          phone: this.answers[this.questions.length - 1] // Assuming phone is the last question\n        };\n        console.log('User Data:', userData);\n        this.closeModal();\n      }\n    },\n    provideFeedback() {\n      const feedbackOptions = ['اختيار رائع!', 'إجابة مميزة!', 'أحسنت!', 'ممتاز، استمر!', 'إجاباتك رائعة!'];\n      this.feedbackMessage = feedbackOptions[Math.floor(Math.random() * feedbackOptions.length)];\n    }\n  },\n  mounted() {\n    this.initializeAnswer(this.currentStep);\n  },\n  watch: {\n    currentStep(newStep) {\n      this.initializeAnswer(newStep);\n    }\n  }\n};","map":{"version":3,"names":["name","props","showStory","Boolean","data","showQuestionnaire","currentStep","answers","feedbackMessage","questions","questionImages","computed","currentQuestion","isLastStep","length","isStepValid","progressPercentage","Math","round","methods","initializeAnswer","step","question","undefined","type","$set","getQuestionImage","closeModal","$emit","document","body","style","overflow","openQuestionnaire","nextStep","provideFeedback","setTimeout","prevStep","submit","userData","email","phone","console","log","feedbackOptions","floor","random","mounted","watch","newStep"],"sources":["src/components/StoryModal.vue"],"sourcesContent":["<template>\n  <div v-if=\"showStory || showQuestionnaire\" class=\"modal-container\" @click.self=\"closeModal\">\n    <!-- Story Content -->\n    <transition name=\"fade\" mode=\"out-in\">\n      <div v-if=\"!showQuestionnaire\" class=\"story-content rtl\" key=\"story\">\n        <button class=\"close-button\" @click=\"closeModal\">&times;</button>\n        <h2 class=\"story-title\">عن دولت عماد</h2>\n        <p class=\"story-text\">\n          دولت عماد هي كوتش حياة شغوفة، مخصصة إنها تساعد الناس يكتشفوا إمكانياتهم الحقيقية ويحققوا أحلامهم.\n          بأسلوب بسيط وجميل بيجمع بين التعاطف والخبرة، دولت بتمكن عملاءها من تجاوز التحديات واكتشاف قوتهم الداخلية.\n        </p>\n        <h3 class=\"story-subheading\">تخصصات دولت تشمل:</h3>\n        <ul class=\"story-list\">\n          <li><strong>بناء الثقة:</strong> بتساعد السيدات يستعيدوا قوتهم وصوتهم في الحياة الشخصية والمهنية.</li>\n          <li><strong>الكوتشينج المهني:</strong> بترشد الأفراد في تحديد أهدافهم المهنية وتوجيه حياتهم العملية ناحية شغفهم.</li>\n          <li><strong>الصحة النفسية:</strong> بتدعم عملاءها في إدارة التوتر والقلق وتعدي المراحل الصعبة في حياتهم بأساليب مخصصة للمرونة النفسية.</li>\n          <li><strong>تطوير القيادة:</strong> بتمكن السيدات والقادة الجدد إنهم يمسكوا مناصب قيادية بشجاعة وثقة.</li>\n        </ul>\n        <p class=\"story-text\">\n          دولت معروفة بأسلوبها الدافئ والداعم. بتقدم مش بس أدوات عملية، لكن كمان بتدي الدعم النفسي اللي عملاءها بيحتاجوه عشان يحققوا النجاح.\n        </p>\n        <button class=\"story-button\" @click=\"openQuestionnaire\">ابدأ رحلتك الآن</button>\n      </div>\n    </transition>\n\n    <!-- Questionnaire Content -->\n    <transition name=\"slide\" mode=\"out-in\">\n      <div v-if=\"showQuestionnaire\" class=\"questionnaire-content rtl\" key=\"questionnaire\">\n        <button class=\"close-button\" @click=\"closeModal\">&times;</button>\n        <transition name=\"fade\" mode=\"out-in\">\n          <div :key=\"currentStep\" class=\"step-content\">\n            <!-- Progress Bar -->\n            <div class=\"progress-bar\">\n              <div class=\"progress\" :style=\"{ width: progressPercentage + '%' }\"></div>\n            </div>\n\n            <!-- Visual/Icons for Engagement -->\n            <div class=\"question-visual\">\n              <img :src=\"getQuestionImage(currentStep)\" alt=\"Question Illustration\" />\n            </div>\n\n            <!-- Question Title and Body -->\n            <h2 class=\"question-title\">{{ currentQuestion.title }}</h2>\n            <div class=\"question-body\">\n              <p v-if=\"currentQuestion.text\">{{ currentQuestion.text }}</p>\n\n              <!-- Single Select Options -->\n              <div v-if=\"currentQuestion.type === 'options'\" class=\"options-list\">\n                <div\n                  v-for=\"(option, index) in currentQuestion.options\"\n                  :key=\"index\"\n                  class=\"option-item\"\n                >\n                  <input\n                    type=\"radio\"\n                    :id=\"`option-${currentStep}-${index}`\"\n                    :name=\"`question-${currentStep}`\"\n                    :value=\"option\"\n                    v-model=\"answers[currentStep]\"\n                  />\n                  <label :for=\"`option-${currentStep}-${index}`\">{{ option }}</label>\n                </div>\n              </div>\n\n              <!-- Multiple Select (Checkbox) -->\n              <div v-if=\"currentQuestion.type === 'checkbox'\" class=\"checkbox-list\">\n                <div\n                  v-for=\"(option, index) in currentQuestion.options\"\n                  :key=\"index\"\n                  class=\"checkbox-option\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    :id=\"`checkbox-${currentStep}-${index}`\"\n                    :value=\"option\"\n                    v-model=\"answers[currentStep]\"\n                  />\n                  <label :for=\"`checkbox-${currentStep}-${index}`\">{{ option }}</label>\n                </div>\n              </div>\n\n              <!-- Text Input -->\n              <div v-if=\"currentQuestion.type === 'input'\">\n                <input\n                  v-model=\"answers[currentStep]\"\n                  :type=\"currentQuestion.inputType\"\n                  :placeholder=\"currentQuestion.placeholder\"\n                  class=\"text-input\"\n                />\n              </div>\n\n              <!-- Date Picker -->\n              <div v-if=\"currentQuestion.type === 'date'\">\n                <input\n                  v-model=\"answers[currentStep]\"\n                  type=\"date\"\n                  class=\"date-input\"\n                />\n              </div>\n            </div>\n\n            <!-- Feedback Message -->\n            <p class=\"feedback-message\" v-if=\"feedbackMessage\">{{ feedbackMessage }}</p>\n\n            <!-- Navigation Buttons -->\n            <div class=\"navigation-buttons\">\n              <button v-if=\"currentStep > 0\" @click=\"prevStep\" class=\"prev-button\">\n                <i class=\"fas fa-arrow-left\"></i> السابق\n              </button>\n              <button\n                v-if=\"!isLastStep\"\n                @click=\"nextStep\"\n                class=\"next-button\"\n                :disabled=\"!isStepValid\"\n              >\n                التالي <i class=\"fas fa-arrow-right\"></i>\n              </button>\n              <button\n                v-if=\"isLastStep\"\n                @click=\"submit\"\n                class=\"submit-button\"\n                :disabled=\"!isStepValid\"\n              >\n                إرسال <i class=\"fas fa-paper-plane\"></i>\n              </button>\n            </div>\n          </div>\n        </transition>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'StoryModal',\n  props: {\n    showStory: Boolean,\n  },\n  data() {\n    return {\n      showQuestionnaire: false,\n      currentStep: 0,\n      answers: {},\n      feedbackMessage: '',\n      questions: [/* Your questions as defined above */],\n      questionImages: [\n        // Add URLs or paths to the images/icons related to each question\n        '/images/question1.png',\n        '/images/question2.png',\n        '/images/question3.png',\n        // Add more as needed...\n      ],\n    };\n  },\n  computed: {\n    currentQuestion() {\n      return this.questions[this.currentStep];\n    },\n    isLastStep() {\n      return this.currentStep === this.questions.length - 1;\n    },\n    isStepValid() {\n      // Validate current step inputs\n    },\n    progressPercentage() {\n      return Math.round(((this.currentStep + 1) / this.questions.length) * 100);\n    },\n  },\n  methods: {\n    initializeAnswer(step) {\n      const question = this.questions[step];\n      if (this.answers[step] === undefined) {\n        if (question.type === 'checkbox') {\n          this.$set(this.answers, step, []);\n        } else {\n          this.$set(this.answers, step, '');\n        }\n      }\n    },\n    getQuestionImage(step) {\n      return this.questionImages[step] || '/images/default.png'; // Fallback to a default image\n    },\n    closeModal() {\n      this.$emit('close');\n      this.showQuestionnaire = false;\n      this.currentStep = 0;\n      this.answers = {};\n      this.feedbackMessage = '';\n      document.body.style.overflow = 'auto';\n    },\n    openQuestionnaire() {\n      this.showQuestionnaire = true;\n      this.currentStep = 0;\n      this.answers = {};\n      this.feedbackMessage = '';\n      this.initializeAnswer(this.currentStep);\n    },\n    nextStep() {\n      if (this.isStepValid) {\n        this.provideFeedback();\n        if (this.currentStep < this.questions.length - 1) {\n          setTimeout(() => {\n            this.currentStep++;\n            this.initializeAnswer(this.currentStep);\n            this.feedbackMessage = '';\n          }, 500);\n        }\n      }\n    },\n    prevStep() {\n      if (this.currentStep > 0) {\n        this.currentStep--;\n        this.feedbackMessage = '';\n      }\n    },\n    submit() {\n      if (this.isStepValid) {\n        const userData = {\n          answers: this.answers,\n          email: this.answers[this.questions.length - 2], // Assuming email is the second last question\n          phone: this.answers[this.questions.length - 1], // Assuming phone is the last question\n        };\n        console.log('User Data:', userData);\n        this.closeModal();\n      }\n    },\n    provideFeedback() {\n      const feedbackOptions = ['اختيار رائع!', 'إجابة مميزة!', 'أحسنت!', 'ممتاز، استمر!', 'إجاباتك رائعة!'];\n      this.feedbackMessage = feedbackOptions[Math.floor(Math.random() * feedbackOptions.length)];\n    },\n  },\n  mounted() {\n    this.initializeAnswer(this.currentStep);\n  },\n  watch: {\n    currentStep(newStep) {\n      this.initializeAnswer(newStep);\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Modal Styles */\n.modal-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  backdrop-filter: blur(20px);\n  background: rgba(255, 255, 255, 0.1);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.story-content,\n.questionnaire-content {\n  backdrop-filter: blur(30px);\n  background: rgba(255, 255, 255, 0.7);\n  width: 90%;\n  max-width: 600px;\n  padding: 2rem;\n  border-radius: 20px;\n  position: relative;\n  animation: fadeInUp 0.5s ease-in-out;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n  max-height: 90vh;\n  overflow-y: auto;\n}\n\n/* Question Visual/Icons */\n.question-visual img {\n  display: block;\n  margin: 0 auto;\n  width: 120px;\n  height: 120px;\n  object-fit: cover;\n  margin-bottom: 1rem;\n}\n\n/* Close Button */\n.close-button {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  background: none;\n  border: none;\n  font-size: 2rem;\n  color: #999;\n  cursor: pointer;\n  z-index: 1100;\n  transition: color 0.3s ease;\n}\n.close-button:hover {\n  color: #333;\n}\n\n/* Progress Bar */\n.progress-bar {\n  width: 100%;\n  background-color: rgba(255, 255, 255, 0.2);\n  height: 4px;\n  border-radius: 2px;\n  margin-bottom: 1rem;\n  overflow: hidden;\n}\n.progress {\n  height: 100%;\n  background-color: #007aff;\n  transition: width 0.3s ease;\n}\n\n/* Titles */\n.story-title,\n.question-title {\n  font-size: 1.8rem;\n  margin-bottom: 1rem;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n    Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  font-weight: 600;\n  color: #000;\n  text-align: center;\n}\n\n/* Text */\n.story-text,\n.question-body p {\n  font-size: 1rem;\n  line-height: 1.6;\n  color: #000;\n  margin-bottom: 1.5rem;\n  font-family: inherit;\n  text-align: center;\n}\n\n/* Navigation Buttons with Icons */\n.navigation-buttons {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 1.5rem;\n}\n\n.prev-button,\n.next-button,\n.submit-button {\n  background-color: #007aff;\n  color: #fff;\n  padding: 0.7rem 1.5rem;\n  border: none;\n  border-radius: 12px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n}\n\n.prev-button:hover,\n.next-button:hover,\n.submit-button:hover {\n  background-color: #005bb5;\n}\n\n.prev-button:disabled,\n.next-button:disabled,\n.submit-button:disabled {\n  background-color: rgba(60, 60, 67, 0.3);\n  cursor: not-allowed;\n}\n\n/* Responsive Styles */\n@media (max-width: 768px) {\n  .story-content,\n  .questionnaire-content {\n    padding: 1rem;\n    max-width: 100%;\n    border-radius: 10px;\n  }\n\n  .story-title,\n  .question-title {\n    font-size: 1.5rem;\n  }\n\n  .navigation-buttons button {\n    font-size: 0.9rem;\n    padding: 0.6rem 1.2rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .story-title,\n  .question-title {\n    font-size: 1.2rem;\n  }\n\n  .navigation-buttons button {\n    font-size: 0.8rem;\n    padding: 0.5rem 1rem;\n  }\n}\n</style>\n"],"mappings":"AAsIA;EACAA,IAAA;EACAC,KAAA;IACAC,SAAA,EAAAC;EACA;EACAC,KAAA;IACA;MACAC,iBAAA;MACAC,WAAA;MACAC,OAAA;MACAC,eAAA;MACAC,SAAA;MACAC,cAAA;MACA;MACA,yBACA,yBACA;MACA;MAAA;IAEA;EACA;EACAC,QAAA;IACAC,gBAAA;MACA,YAAAH,SAAA,MAAAH,WAAA;IACA;IACAO,WAAA;MACA,YAAAP,WAAA,UAAAG,SAAA,CAAAK,MAAA;IACA;IACAC,YAAA;MACA;IAAA,CACA;IACAC,mBAAA;MACA,OAAAC,IAAA,CAAAC,KAAA,OAAAZ,WAAA,aAAAG,SAAA,CAAAK,MAAA;IACA;EACA;EACAK,OAAA;IACAC,iBAAAC,IAAA;MACA,MAAAC,QAAA,QAAAb,SAAA,CAAAY,IAAA;MACA,SAAAd,OAAA,CAAAc,IAAA,MAAAE,SAAA;QACA,IAAAD,QAAA,CAAAE,IAAA;UACA,KAAAC,IAAA,MAAAlB,OAAA,EAAAc,IAAA;QACA;UACA,KAAAI,IAAA,MAAAlB,OAAA,EAAAc,IAAA;QACA;MACA;IACA;IACAK,iBAAAL,IAAA;MACA,YAAAX,cAAA,CAAAW,IAAA;IACA;IACAM,WAAA;MACA,KAAAC,KAAA;MACA,KAAAvB,iBAAA;MACA,KAAAC,WAAA;MACA,KAAAC,OAAA;MACA,KAAAC,eAAA;MACAqB,QAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAC,QAAA;IACA;IACAC,kBAAA;MACA,KAAA5B,iBAAA;MACA,KAAAC,WAAA;MACA,KAAAC,OAAA;MACA,KAAAC,eAAA;MACA,KAAAY,gBAAA,MAAAd,WAAA;IACA;IACA4B,SAAA;MACA,SAAAnB,WAAA;QACA,KAAAoB,eAAA;QACA,SAAA7B,WAAA,QAAAG,SAAA,CAAAK,MAAA;UACAsB,UAAA;YACA,KAAA9B,WAAA;YACA,KAAAc,gBAAA,MAAAd,WAAA;YACA,KAAAE,eAAA;UACA;QACA;MACA;IACA;IACA6B,SAAA;MACA,SAAA/B,WAAA;QACA,KAAAA,WAAA;QACA,KAAAE,eAAA;MACA;IACA;IACA8B,OAAA;MACA,SAAAvB,WAAA;QACA,MAAAwB,QAAA;UACAhC,OAAA,OAAAA,OAAA;UACAiC,KAAA,OAAAjC,OAAA,MAAAE,SAAA,CAAAK,MAAA;UAAA;UACA2B,KAAA,OAAAlC,OAAA,MAAAE,SAAA,CAAAK,MAAA;QACA;QACA4B,OAAA,CAAAC,GAAA,eAAAJ,QAAA;QACA,KAAAZ,UAAA;MACA;IACA;IACAQ,gBAAA;MACA,MAAAS,eAAA;MACA,KAAApC,eAAA,GAAAoC,eAAA,CAAA3B,IAAA,CAAA4B,KAAA,CAAA5B,IAAA,CAAA6B,MAAA,KAAAF,eAAA,CAAA9B,MAAA;IACA;EACA;EACAiC,QAAA;IACA,KAAA3B,gBAAA,MAAAd,WAAA;EACA;EACA0C,KAAA;IACA1C,YAAA2C,OAAA;MACA,KAAA7B,gBAAA,CAAA6B,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}