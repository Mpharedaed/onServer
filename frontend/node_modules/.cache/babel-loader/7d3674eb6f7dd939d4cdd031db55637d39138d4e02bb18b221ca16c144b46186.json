{"ast":null,"code":"export default {\n  name: 'QuestionnaireModal',\n  props: {\n    showQuestionnaire: Boolean\n  },\n  data() {\n    return {\n      currentStep: 0,\n      answers: {},\n      questions: [{\n        title: 'مرحباً! لنخصص تجربتك.',\n        text: 'ما هي أهدافك الرئيسية في الحياة حالياً؟',\n        type: 'options',\n        options: ['تطوير مهني', 'تحسين الصحة النفسية', 'بناء الثقة', 'تطوير القيادة']\n      }, {\n        title: 'رائع!',\n        text: 'ما هو أكبر تحدي تواجهه الآن؟',\n        type: 'options',\n        options: ['قلة التركيز', 'القلق', 'نقص الحافز', 'إدارة الوقت']\n      }, {\n        title: 'شكراً لمشاركتك.',\n        text: 'من فضلك أدخل بريدك الإلكتروني لنتمكن من التواصل معك.',\n        type: 'input',\n        inputType: 'email',\n        placeholder: 'ادخل بريدك الإلكتروني'\n      }]\n    };\n  },\n  computed: {\n    currentQuestion() {\n      return this.questions[this.currentStep];\n    },\n    isLastStep() {\n      return this.currentStep === this.questions.length - 1;\n    },\n    canProceed() {\n      const answer = this.answers[this.currentStep];\n      if (this.currentQuestion.type === 'options') {\n        return !!answer;\n      } else if (this.currentQuestion.type === 'input') {\n        return this.validateInput(answer);\n      }\n      return true;\n    }\n  },\n  methods: {\n    closeQuestionnaire() {\n      this.$emit('close');\n      document.body.style.overflow = 'auto';\n    },\n    nextStep() {\n      if (this.canProceed && this.currentStep < this.questions.length - 1) {\n        this.currentStep++;\n      }\n    },\n    prevStep() {\n      if (this.currentStep > 0) {\n        this.currentStep--;\n      }\n    },\n    optionSelected() {\n      // Automatically proceed to the next step after selecting an option\n      setTimeout(() => {\n        this.nextStep();\n      }, 300); // Delay for better UX\n    },\n    validateInput(value) {\n      if (this.currentQuestion.inputType === 'email') {\n        const emailRegex = /\\S+@\\S+\\.\\S+/;\n        return emailRegex.test(value);\n      }\n      return !!value;\n    },\n    submit() {\n      // Collect all the answers\n      const userData = {\n        answers: this.answers,\n        email: this.answers[this.currentStep]\n      };\n      // Handle the form submission logic here (e.g., send to server)\n      console.log('User Data:', userData);\n      // Close the questionnaire\n      this.closeQuestionnaire();\n    }\n  }\n};","map":{"version":3,"names":["name","props","showQuestionnaire","Boolean","data","currentStep","answers","questions","title","text","type","options","inputType","placeholder","computed","currentQuestion","isLastStep","length","canProceed","answer","validateInput","methods","closeQuestionnaire","$emit","document","body","style","overflow","nextStep","prevStep","optionSelected","setTimeout","value","emailRegex","test","submit","userData","email","console","log"],"sources":["src/components/StoryModal.vue"],"sourcesContent":["<template>\n  <div v-if=\"showQuestionnaire\" class=\"questionnaire-widget\" @click.self=\"closeQuestionnaire\">\n    <div class=\"questionnaire-content rtl\">\n      <button class=\"close-button\" @click=\"closeQuestionnaire\">&times;</button>\n      <transition name=\"slide-fade\" mode=\"out-in\">\n        <div :key=\"currentStep\" class=\"step-content\">\n          <h2 class=\"question-title\">{{ currentQuestion.title }}</h2>\n          <div class=\"question-body\">\n            <p v-if=\"currentQuestion.text\">{{ currentQuestion.text }}</p>\n            <!-- Display options if the question type is 'options' -->\n            <div v-if=\"currentQuestion.type === 'options'\" class=\"options-list\">\n              <div\n                v-for=\"(option, index) in currentQuestion.options\"\n                :key=\"index\"\n                class=\"option-item\"\n              >\n                <input\n                  type=\"radio\"\n                  :id=\"`option-${currentStep}-${index}`\"\n                  :name=\"`question-${currentStep}`\"\n                  :value=\"option\"\n                  v-model=\"answers[currentStep]\"\n                  @change=\"optionSelected\"\n                />\n                <label :for=\"`option-${currentStep}-${index}`\">{{ option }}</label>\n              </div>\n            </div>\n            <!-- Display input if the question type is 'input' -->\n            <div v-if=\"currentQuestion.type === 'input'\">\n              <input\n                v-model=\"answers[currentStep]\"\n                :type=\"currentQuestion.inputType\"\n                :placeholder=\"currentQuestion.placeholder\"\n                class=\"text-input\"\n              />\n            </div>\n          </div>\n          <div class=\"navigation-buttons\">\n            <button v-if=\"currentStep > 0\" @click=\"prevStep\" class=\"prev-button\">السابق</button>\n            <button\n              v-if=\"!isLastStep\"\n              @click=\"nextStep\"\n              class=\"next-button\"\n              :disabled=\"!canProceed\"\n            >\n              التالي\n            </button>\n            <button v-if=\"isLastStep\" @click=\"submit\" class=\"submit-button\" :disabled=\"!canProceed\">\n              إرسال\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'QuestionnaireModal',\n  props: {\n    showQuestionnaire: Boolean,\n  },\n  data() {\n    return {\n      currentStep: 0,\n      answers: {},\n      questions: [\n        {\n          title: 'مرحباً! لنخصص تجربتك.',\n          text: 'ما هي أهدافك الرئيسية في الحياة حالياً؟',\n          type: 'options',\n          options: ['تطوير مهني', 'تحسين الصحة النفسية', 'بناء الثقة', 'تطوير القيادة'],\n        },\n        {\n          title: 'رائع!',\n          text: 'ما هو أكبر تحدي تواجهه الآن؟',\n          type: 'options',\n          options: ['قلة التركيز', 'القلق', 'نقص الحافز', 'إدارة الوقت'],\n        },\n        {\n          title: 'شكراً لمشاركتك.',\n          text: 'من فضلك أدخل بريدك الإلكتروني لنتمكن من التواصل معك.',\n          type: 'input',\n          inputType: 'email',\n          placeholder: 'ادخل بريدك الإلكتروني',\n        },\n      ],\n    };\n  },\n  computed: {\n    currentQuestion() {\n      return this.questions[this.currentStep];\n    },\n    isLastStep() {\n      return this.currentStep === this.questions.length - 1;\n    },\n    canProceed() {\n      const answer = this.answers[this.currentStep];\n      if (this.currentQuestion.type === 'options') {\n        return !!answer;\n      } else if (this.currentQuestion.type === 'input') {\n        return this.validateInput(answer);\n      }\n      return true;\n    },\n  },\n  methods: {\n    closeQuestionnaire() {\n      this.$emit('close');\n      document.body.style.overflow = 'auto';\n    },\n    nextStep() {\n      if (this.canProceed && this.currentStep < this.questions.length - 1) {\n        this.currentStep++;\n      }\n    },\n    prevStep() {\n      if (this.currentStep > 0) {\n        this.currentStep--;\n      }\n    },\n    optionSelected() {\n      // Automatically proceed to the next step after selecting an option\n      setTimeout(() => {\n        this.nextStep();\n      }, 300); // Delay for better UX\n    },\n    validateInput(value) {\n      if (this.currentQuestion.inputType === 'email') {\n        const emailRegex = /\\S+@\\S+\\.\\S+/;\n        return emailRegex.test(value);\n      }\n      return !!value;\n    },\n    submit() {\n      // Collect all the answers\n      const userData = {\n        answers: this.answers,\n        email: this.answers[this.currentStep],\n      };\n      // Handle the form submission logic here (e.g., send to server)\n      console.log('User Data:', userData);\n      // Close the questionnaire\n      this.closeQuestionnaire();\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Questionnaire Widget Styles */\n.questionnaire-widget {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  backdrop-filter: blur(10px);\n  background-color: rgba(0, 0, 0, 0.6);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  animation: fadeIn 0.6s forwards;\n}\n\n.questionnaire-content {\n  backdrop-filter: blur(20px);\n  background: rgba(255, 255, 255, 0.9);\n  width: 90%;\n  max-width: 600px;\n  padding: 2rem 3rem;\n  border-radius: 20px;\n  position: relative;\n  overflow: hidden;\n  animation: zoomIn 0.5s forwards;\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);\n  max-height: 90vh;\n  overflow-y: auto;\n}\n\n.close-button {\n  position: absolute;\n  top: 1.5rem;\n  left: 1.5rem;\n  background: none;\n  border: none;\n  font-size: 2rem;\n  color: #555;\n  cursor: pointer;\n  z-index: 1100;\n  padding: 10px;\n  transition: color 0.3s ease;\n}\n.close-button:hover {\n  color: #ff6f61;\n}\n\n.question-title {\n  font-size: 2rem;\n  margin-bottom: 1.5rem;\n  font-family: 'Cairo', sans-serif;\n  font-weight: 700;\n  color: #333;\n  text-align: center;\n}\n\n.question-body {\n  margin-bottom: 2rem;\n  text-align: center;\n}\n\n.options-list {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.option-item {\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.option-item input[type='radio'] {\n  accent-color: #ff6f61;\n  margin-left: 0.5rem;\n  transform: scale(1.5);\n}\n\n.option-item label {\n  font-size: 1.2rem;\n  color: #333;\n  font-family: 'Cairo', sans-serif;\n}\n\n.text-input {\n  width: 100%;\n  max-width: 400px;\n  padding: 0.8rem 1rem;\n  font-size: 1rem;\n  border: 1px solid #ccc;\n  border-radius: 50px;\n  outline: none;\n  text-align: center;\n}\n\n.navigation-buttons {\n  display: flex;\n  justify-content: space-between;\n}\n\n.prev-button,\n.next-button,\n.submit-button {\n  background-color: #ff6f61;\n  color: #fff;\n  padding: 0.8rem 2rem;\n  border: none;\n  border-radius: 50px;\n  font-size: 1.1rem;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n.prev-button:hover,\n.next-button:hover,\n.submit-button:hover {\n  background-color: #e65b50;\n}\n.prev-button[disabled],\n.next-button[disabled],\n.submit-button[disabled] {\n  background-color: #ccc;\n  cursor: not-allowed;\n}\n\n/* Animations */\n.slide-fade-enter-active,\n.slide-fade-leave-active {\n  transition: all 0.5s ease;\n}\n.slide-fade-enter,\n.slide-fade-leave-to {\n  opacity: 0;\n  transform: translateX(100px);\n}\n\n/* Keyframes */\n@keyframes zoomIn {\n  from {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n/* Responsive Styles */\n@media (max-width: 768px) {\n  .questionnaire-content {\n    padding: 1rem 1rem;\n    max-width: 100%;\n    border-radius: 10px;\n  }\n\n  .question-title {\n    font-size: 1.8rem;\n  }\n\n  .option-item label {\n    font-size: 1rem;\n  }\n\n  .text-input {\n    font-size: 0.9rem;\n    padding: 0.6rem 1rem;\n  }\n\n  .navigation-buttons button {\n    font-size: 1rem;\n    padding: 0.6rem 1.5rem;\n  }\n\n  .close-button {\n    font-size: 1.5rem;\n    padding: 8px;\n  }\n}\n\n@media (max-width: 480px) {\n  .questionnaire-content {\n    padding: 0.5rem;\n    max-width: 100%;\n  }\n\n  .question-title {\n    font-size: 1.5rem;\n  }\n\n  .option-item label {\n    font-size: 0.9rem;\n  }\n\n  .text-input {\n    font-size: 0.8rem;\n    padding: 0.5rem 0.8rem;\n  }\n\n  .navigation-buttons button {\n    font-size: 0.9rem;\n    padding: 0.5rem 1rem;\n  }\n\n  .close-button {\n    font-size: 1.3rem;\n    padding: 6px;\n  }\n}\n</style>\n"],"mappings":"AA0DA;EACAA,IAAA;EACAC,KAAA;IACAC,iBAAA,EAAAC;EACA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,OAAA;MACAC,SAAA,GACA;QACAC,KAAA;QACAC,IAAA;QACAC,IAAA;QACAC,OAAA;MACA,GACA;QACAH,KAAA;QACAC,IAAA;QACAC,IAAA;QACAC,OAAA;MACA,GACA;QACAH,KAAA;QACAC,IAAA;QACAC,IAAA;QACAE,SAAA;QACAC,WAAA;MACA;IAEA;EACA;EACAC,QAAA;IACAC,gBAAA;MACA,YAAAR,SAAA,MAAAF,WAAA;IACA;IACAW,WAAA;MACA,YAAAX,WAAA,UAAAE,SAAA,CAAAU,MAAA;IACA;IACAC,WAAA;MACA,MAAAC,MAAA,QAAAb,OAAA,MAAAD,WAAA;MACA,SAAAU,eAAA,CAAAL,IAAA;QACA,SAAAS,MAAA;MACA,gBAAAJ,eAAA,CAAAL,IAAA;QACA,YAAAU,aAAA,CAAAD,MAAA;MACA;MACA;IACA;EACA;EACAE,OAAA;IACAC,mBAAA;MACA,KAAAC,KAAA;MACAC,QAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAC,QAAA;IACA;IACAC,SAAA;MACA,SAAAV,UAAA,SAAAb,WAAA,QAAAE,SAAA,CAAAU,MAAA;QACA,KAAAZ,WAAA;MACA;IACA;IACAwB,SAAA;MACA,SAAAxB,WAAA;QACA,KAAAA,WAAA;MACA;IACA;IACAyB,eAAA;MACA;MACAC,UAAA;QACA,KAAAH,QAAA;MACA;IACA;IACAR,cAAAY,KAAA;MACA,SAAAjB,eAAA,CAAAH,SAAA;QACA,MAAAqB,UAAA;QACA,OAAAA,UAAA,CAAAC,IAAA,CAAAF,KAAA;MACA;MACA,SAAAA,KAAA;IACA;IACAG,OAAA;MACA;MACA,MAAAC,QAAA;QACA9B,OAAA,OAAAA,OAAA;QACA+B,KAAA,OAAA/B,OAAA,MAAAD,WAAA;MACA;MACA;MACAiC,OAAA,CAAAC,GAAA,eAAAH,QAAA;MACA;MACA,KAAAd,kBAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}