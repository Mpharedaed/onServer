{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'UserProfile',\n  data() {\n    return {\n      user: {\n        username: '',\n        bio: '',\n        avatar: ''\n      },\n      posts: [],\n      friends: [],\n      potentialFriends: [],\n      selectedFile: null,\n      error: null,\n      loading: true,\n      activeTab: 'posts'\n    };\n  },\n  computed: {\n    avatarUrl() {\n      return this.user.avatar ? `http://127.0.0.1:5000/uploads/${this.user.avatar}` : 'default-avatar.png';\n    }\n  },\n  created() {\n    this.fetchUser();\n    this.fetchFriends();\n    this.fetchPotentialFriends();\n  },\n  methods: {\n    async fetchUser() {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://127.0.0.1:5000/api/profile', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.user = response.data;\n        this.posts = response.data.posts;\n      } catch (error) {\n        console.error('Error fetching user:', error);\n        this.error = 'Failed to fetch user.';\n      }\n    },\n    async fetchFriends() {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://127.0.0.1:5000/api/friends', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.friends = response.data.friends;\n      } catch (error) {\n        console.error('Error fetching friends:', error);\n        this.error = 'Failed to fetch friends.';\n      }\n    },\n    async fetchPotentialFriends() {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://127.0.0.1:5000/api/potential_friends', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.potentialFriends = response.data.potential_friends;\n      } catch (error) {\n        console.error('Error fetching potential friends:', error);\n        this.error = 'Failed to fetch potential friends.';\n      }\n    },\n    async sendFriendRequest(userId) {\n      try {\n        const token = localStorage.getItem('token');\n        await axios.post(`http://127.0.0.1:5000/api/add`, {\n          user2_id: userId\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        alert('Friend request sent successfully!');\n        this.potentialFriends = this.potentialFriends.filter(user => user.id !== userId);\n      } catch (error) {\n        console.error('Error sending friend request:', error);\n        alert('Failed to send friend request.');\n      }\n    },\n    onFileChange(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    async updateSettings() {\n      try {\n        const token = localStorage.getItem('token');\n        const formData = new FormData();\n        formData.append('username', this.user.username);\n        formData.append('bio', this.user.bio);\n        if (this.selectedFile) {\n          formData.append('avatar', this.selectedFile);\n        }\n        const response = await axios.put('http://127.0.0.1:5000/api/profile', formData, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        this.user = response.data.user;\n        alert('Settings updated successfully');\n      } catch (error) {\n        console.error('Error updating settings:', error);\n        this.error = 'Failed to update settings.';\n      }\n    },\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","user","username","bio","avatar","posts","friends","potentialFriends","selectedFile","error","loading","activeTab","computed","avatarUrl","created","fetchUser","fetchFriends","fetchPotentialFriends","methods","token","localStorage","getItem","response","get","headers","Authorization","console","potential_friends","sendFriendRequest","userId","post","user2_id","alert","filter","id","onFileChange","event","target","files","updateSettings","formData","FormData","append","put","formatDate","date","options","year","month","day","Date","toLocaleDateString","undefined"],"sources":["src/components/UserProfile/UserProfile.vue"],"sourcesContent":["<template>\n  <div class=\"profile-container\">\n    <!-- User Info Section -->\n    <div class=\"user-info-container\">\n      <img :src=\"avatarUrl\" alt=\"User Avatar\" class=\"avatar-large\">\n      <div class=\"user-details\">\n        <h1 class=\"username\">{{ user.username || 'Anonymous' }}</h1>\n        <p class=\"user-bio\">{{ user.bio || 'No bio available' }}</p>\n      </div>\n    </div>\n\n    <!-- Navigation Tabs -->\n    <div class=\"profile-nav\">\n      <button @click=\"activeTab = 'posts'\" :class=\"{ active: activeTab === 'posts' }\">Posts</button>\n      <button @click=\"activeTab = 'friends'\" :class=\"{ active: activeTab === 'friends' }\">Friends</button>\n      <button @click=\"activeTab = 'potentialFriends'\" :class=\"{ active: activeTab === 'potentialFriends' }\">Potential Friends</button>\n      <button @click=\"activeTab = 'settings'\" :class=\"{ active: activeTab === 'settings' }\">Settings</button>\n    </div>\n\n    <!-- Posts Section -->\n    <div v-if=\"activeTab === 'posts'\" class=\"posts-container\">\n      <h2 class=\"section-title\">My Posts</h2>\n      <ul class=\"post-list\">\n        <li v-for=\"post in posts\" :key=\"post.id\" class=\"post-item\">\n          <div class=\"post-header\" v-if=\"post.user\">\n            <img :src=\"post.user.avatar || 'default-avatar.png'\" alt=\"User Avatar\" class=\"avatar\">\n            <div class=\"user-info\">\n              <h3 class=\"username\">{{ post.user.username || 'Anonymous' }}</h3>\n              <p class=\"post-date\">{{ formatDate(post.date) }}</p>\n            </div>\n          </div>\n          <div class=\"post-content\">{{ post.content }}</div>\n          <div class=\"post-actions\">\n            <button @click=\"likePost(post)\" class=\"like-button\">üëç Like</button>\n            <span class=\"like-count\">{{ post.likes }} Likes</span>\n            <button class=\"comment-button\">üí¨ Comment</button>\n            <button class=\"share-button\">üîó Share</button>\n          </div>\n          <div class=\"comment-section\">\n            <input type=\"text\" class=\"comment-input\" placeholder=\"Write a comment...\" />\n          </div>\n        </li>\n      </ul>\n      <p v-if=\"posts.length === 0\" class=\"no-posts\">You have no posts.</p>\n    </div>\n\n    <!-- Friends Section -->\n    <div v-if=\"activeTab === 'friends'\" class=\"friends-container\">\n      <h2 class=\"section-title\">Friends</h2>\n      <ul class=\"friends-list\">\n        <li v-for=\"friend in friends\" :key=\"friend.id\" class=\"friend-item\">\n          <img :src=\"friend.avatar || 'default-avatar.png'\" alt=\"Friend Avatar\" class=\"avatar-small\">\n          <div class=\"friend-info\">\n            <h3 class=\"friend-name\">{{ friend.username }}</h3>\n          </div>\n        </li>\n      </ul>\n      <p v-if=\"friends.length === 0\" class=\"no-friends\">You have no friends.</p>\n    </div>\n\n    <!-- Potential Friends Section -->\n    <div v-if=\"activeTab === 'potentialFriends'\" class=\"potential-friends-container\">\n      <h2 class=\"section-title\">Potential Friends</h2>\n      <ul class=\"potential-friends-list\">\n        <li v-for=\"friend in potentialFriends\" :key=\"friend.id\" class=\"friend-item\">\n          <img :src=\"friend.avatar || 'default-avatar.png'\" alt=\"Friend Avatar\" class=\"avatar-small\">\n          <div class=\"friend-info\">\n            <h3 class=\"friend-name\">{{ friend.username }}</h3>\n            <button @click=\"sendFriendRequest(friend.id)\" class=\"add-friend-button\">Add Friend</button>\n          </div>\n        </li>\n      </ul>\n      <p v-if=\"potentialFriends.length === 0\" class=\"no-friends\">No potential friends found.</p>\n    </div>\n\n    <!-- Settings Section -->\n    <div v-if=\"activeTab === 'settings'\" class=\"settings-container\">\n      <h2 class=\"section-title\">Settings</h2>\n      <form @submit.prevent=\"updateSettings\">\n        <label for=\"username\">Username</label>\n        <input type=\"text\" id=\"username\" v-model=\"user.username\">\n\n        <label for=\"bio\">Bio</label>\n        <textarea id=\"bio\" v-model=\"user.bio\"></textarea>\n\n        <label for=\"avatar\">Profile Photo</label>\n        <input type=\"file\" id=\"avatar\" @change=\"onFileChange\">\n\n        <button type=\"submit\" class=\"save-button\">Save Changes</button>\n      </form>\n    </div>\n\n    <!-- Error Message -->\n    <div v-if=\"error\" class=\"error-message\">{{ error }}</div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'UserProfile',\n  data() {\n    return {\n      user: { username: '', bio: '', avatar: '' },\n      posts: [],\n      friends: [],\n      potentialFriends: [],\n      selectedFile: null,\n      error: null,\n      loading: true,\n      activeTab: 'posts',\n    };\n  },\n  computed: {\n    avatarUrl() {\n      return this.user.avatar ? `http://127.0.0.1:5000/uploads/${this.user.avatar}` : 'default-avatar.png';\n    }\n  },\n  created() {\n    this.fetchUser();\n    this.fetchFriends();\n    this.fetchPotentialFriends();\n  },\n  methods: {\n    async fetchUser() {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://127.0.0.1:5000/api/profile', {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        this.user = response.data;\n        this.posts = response.data.posts;\n      } catch (error) {\n        console.error('Error fetching user:', error);\n        this.error = 'Failed to fetch user.';\n      }\n    },\n    async fetchFriends() {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://127.0.0.1:5000/api/friends', {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        this.friends = response.data.friends;\n      } catch (error) {\n        console.error('Error fetching friends:', error);\n        this.error = 'Failed to fetch friends.';\n      }\n    },\n    async fetchPotentialFriends() {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://127.0.0.1:5000/api/potential_friends', {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        this.potentialFriends = response.data.potential_friends;\n      } catch (error) {\n        console.error('Error fetching potential friends:', error);\n        this.error = 'Failed to fetch potential friends.';\n      }\n    },\n    async sendFriendRequest(userId) {\n      try {\n        const token = localStorage.getItem('token');\n        await axios.post(`http://127.0.0.1:5000/api/add`, { user2_id: userId }, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        alert('Friend request sent successfully!');\n        this.potentialFriends = this.potentialFriends.filter(user => user.id !== userId);\n      } catch (error) {\n        console.error('Error sending friend request:', error);\n        alert('Failed to send friend request.');\n      }\n    },\n    onFileChange(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    async updateSettings() {\n      try {\n        const token = localStorage.getItem('token');\n        const formData = new FormData();\n        formData.append('username', this.user.username);\n        formData.append('bio', this.user.bio);\n        if (this.selectedFile) {\n          formData.append('avatar', this.selectedFile);\n        }\n\n        const response = await axios.put('http://127.0.0.1:5000/api/profile', formData, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        this.user = response.data.user;\n        alert('Settings updated successfully');\n      } catch (error) {\n        console.error('Error updating settings:', error);\n        this.error = 'Failed to update settings.';\n      }\n    },\n    formatDate(date) {\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n.profile-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  background: #f0f2f5;\n  border-radius: 10px;\n}\n\n.user-info-container {\n  display: flex;\n  align-items: center;\n  padding: 20px;\n  background: #fff;\n  border-radius: 10px;\n  margin-bottom: 20px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.avatar-large {\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  margin-right: 20px;\n}\n\n.user-details {\n  flex-grow: 1;\n}\n\n.username {\n  font-size: 24px;\n  font-weight: bold;\n  margin: 0;\n}\n\n.user-bio {\n  font-size: 16px;\n  color: #666;\n}\n\n.profile-nav {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 20px;\n}\n\n.profile-nav button {\n  padding: 10px 20px;\n  border: none;\n  background: #007bff;\n  color: #fff;\n  cursor: pointer;\n  border-radius: 20px;\n  font-size: 16px;\n}\n\n.profile-nav button.active {\n  background: #0056b3;\n}\n\n.section-title {\n  font-size: 22px;\n  margin-bottom: 10px;\n  text-align: center;\n}\n\n.posts-container, .friends-container, .potential-friends-container, .settings-container {\n  background: #fff;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.post-list, .friends-list, .potential-friends-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n.post-item, .friend-item {\n  background: #f9f9f9;\n  padding: 15px;\n  margin-bottom: 10px;\n  border-radius: 8px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.post-header, .friend-info {\n  display: flex;\n  align-items: center;\n}\n\n.avatar, .avatar-small {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin-right: 10px;\n}\n\n.post-content, .friend-name {\n  font-size: 16px;\n  color: #333;\n}\n\n.post-actions, .comment-section, .error-message {\n  border-top: 1px solid #e1e4e8;\n  padding-top: 10px;\n  margin-top: 10px;\n}\n\n.like-button, .comment-button, .share-button {\n  background: none;\n  border: none;\n  color: #007bff;\n  cursor: pointer;\n  font-size: 14px;\n  margin-right: 10px;\n}\n\n.like-button:hover, .comment-button:hover, .share-button:hover {\n  text-decoration: underline;\n}\n\n.like-count, .no-posts, .no-friends {\n  font-size: 14px;\n  color: #555;\n}\n\n.comment-input {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #e1e4e8;\n  border-radius: 20px;\n  background: #f0f2f5;\n}\n\n.settings-container label {\n  display: block;\n  font-size: 14px;\n  margin-bottom: 5px;\n}\n\n.settings-container input, .settings-container textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 10px;\n  border: 1px solid #e1e4e8;\n  border-radius: 5px;\n}\n\n.save-button {\n  padding: 10px 20px;\n  border: none;\n  background: #28a745;\n  color: #fff;\n  cursor: pointer;\n  border-radius: 5px;\n  font-size: 16px;\n}\n\n.error-message {\n  color: #ff4d4d;\n  text-align: center;\n  font-size: 16px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}